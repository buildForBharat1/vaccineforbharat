{"version":3,"sources":["utils/network.js","booking/beneficiary.js","booking/slot.js","utils/queryParams.js","webCallback/index.js","assests/build4bharat.jpg","App.js","reportWebVitals.js","index.js","utils/stringUtils.js","stateView/index.js","constants.js"],"names":["makePostCall","path","body","stateCallback","token","a","isLoading","Promise","resolve","then","fetch","method","headers","JSON","stringify","response","json","data","error","catch","errorObj","code","errorCode","message","makeGetCall","filterBeneficiary","state","beneficiaryList","paramsName","getFirstName","name","paramsDisplayName","displayName","idType","id_type","id_number","maskedIdNumber","slice","idMatchRecord","_","entry","entryIdType","ID_TYPE","photo_id_type","entryIdNumber","verifiedNameMatchedBeneficiary","firstName","getEditDistance","ALLOWED_NAME_EDITS","profileNameMatchedBeneficiary","getStringSimilarityBasedBeneficiary","getBeneficiaryDetailsEntity","beneficiary","beneficiary_id","beneficiary_reference_id","vaccine","vaccination_status","dose1_date","dose2_date","fetchBenficiaries","API_URLS","FETCH_BENEFICIARY","beneficiaryDetails","stage","PROCESS_STAGE","NOT_REGISTERED","registeredBeneficiaryList","VACCINATED","appointments","EXISTING_BOOKING","FETCH_SLOTS","getAvailableVaccineSlot","centerList","lastAttemptedSession","availableSlots","center","sessions","availableSessions","session","centerAvailability","dose1Availability","SLOT_FILTER","MIN_CAPACITY","min_age_limit","MIN_AGE","session_id","maxAvailabilitySession","targetSlot","availableSession","slotDate","date","getCurrentDateString","slots","getTargetSlotTime","push","slot_time","fetchSlots","district","REGISTERED","dateString","getSlotDateString","vaccineSlot","ERROR_CODE","NO_SLOT","TRIGGER_CAPTCHA","getUrlParamsFromObj","obj","qs","triggerCallback","callbackDelay","callbackParams","getCallbackParams","appState","getAppState","requestBody","auth_key","phone","registeredPhone","alternatePhone","app_state","queryString","window","setTimeout","location","href","callback","getErrorParams","metaData","getMetaDataParams","baseState","dose_1_date","dose_2_date","err_code","err_message","meta_data","lastAppointment","center_id","center_name","slot","dose","appointment_id","SLOT_BOOKED","appointmentId","vaccineFee","getVaccineFee","center_address","address","center_district_name","district_name","center_pincode","pincode","vaccine_fee","NO_BENEFICIARY","ERROR","vaccineFeeRates","selectedVaccineRate","available_beneficiaries","MAX_BENEFICIARY_ALLOWED","shajs","require","useStyles","makeStyles","root","backgroundColor","width","image","overflowY","card","flexGrow","minHeight","margin","padding","position","bottom","button","marginTop","goHomeButton","getRandomSecretKey","index","parseInt","Math","random","SECRET_KEYS","withRouter","props","searchParams","search","ignoreQueryPrefix","initialStage","ALTERNATE_PHONE_INIT","INIT","useState","otp","captcha","lastPhone","setState","OTP_RETRY_TIME","retryTime","setRetryTime","bookingAttempt","setBookingAttempt","DEFAULT_AUTO_CALLBACK_STATE","autoCallBackState","setAutoCallBackState","updatedState","changeOtp","changeCaptcha","triggerOtp","secretKey","txnId","VALIDATE_OTP","submitOtp","otpHash","update","digest","submitCaptcha","SCHEDULE","BOOKING_FAILED","triggerCaptcha","svg","changeRegisteredPhone","submitRegisteredPhone","activePhone","INVALID_PHONE","INVALID_PHONE_REASONS_TEXT","DEFAULT","enterAlternatePhoneInitStage","goToHome","handleBookingFailure","MAX_BOOKING_ATTEMPT","intervalId","clearInterval","useEffect","isTimerOn","COWIN_ERROR_CODE","INVALID_OTP","INVALID_CAPTCHA","callBackDelayInSeconds","classes","renderView","renderCaptchStage","renderSuccessStage","renderVaccinatedStage","renderExistingBookingStage","renderBookingFailedStage","renderErrorStage","renderRegisteredStage","renderNotRegiseteredState","renderAlternatePhoneInitState","renderOtpStage","getRenderView","errorItem","Grid","alignItems","justify","item","lg","Typography","color","Box","fontWeight","className","src","Image","Card","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","component","App","document","getElementById","lowerName","word","firstString","secondString","lengthFirstString","lengthSecondString","costs","indexFirst","indexSecond","min","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","nextDay","setDate","getMinuteString","seconds","toISOString","substr","verifiedName","beneficiaryNamesLowerCase","verifiedNameLowerCase","bestMatchResults","stringSimilarity","bestMatch","bestMatchIndex","rating","getRedirectElement","params","retryEnabled","retryTimeString","variant","my","onClick","maxLength","type","id","label","value","onChange","e","target","container","disabled","base64data","Buffer","toString","getBookingActionElement","getRetryElement","bookingActionElement","errorMessage","errCode","getErrorMessage","direction","fullWidth","size","UNKNOWN_ERROR","SAME_AS_LAST"],"mappings":"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","file":"static/js/main.97b7c0d7.chunk.js","sourcesContent":["\nexport const makePostCall = async (path, body, stateCallback, token) => {\n  stateCallback({ isLoading: true });\n  return Promise.resolve()\n  .then(() => {\n    return fetch(path, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}` },\n      body: JSON.stringify(body)\n    })\n  })\n  .then((response) => {\n    return response.json();\n  })\n  .then((data) => {\n    stateCallback({ isLoading: false });\n    if (data.error) {\n      throw data;\n    }\n    return data;\n  })\n  .catch(data => {\n    stateCallback({ errorObj: {code: data.errorCode, message: data.error }, isLoading: false });\n    throw data;\n  });\n};\n\nexport const makeGetCall = async (path, stateCallback, token) => {\n  stateCallback({ isLoading: true });\n  return Promise.resolve()\n  .then(() => {\n    return fetch(path, {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}` }\n    })\n  })\n  .then((response) => {\n    return response.json();\n  })\n  .then((data) => {\n    stateCallback({ isLoading: false });\n    if (data.error) {\n      throw data;\n    }\n    return data;\n  })\n  .catch(data => {\n    stateCallback({ errorObj: {code: data.errorCode, message: data.error }, isLoading: false });\n    throw data;\n  });\n};","import * as _ from 'lodash';\nimport { makeGetCall, makePostCall } from '../utils/network';\nimport { getEditDistance, getFirstName, getCurrentDateString,\n  getStringSimilarityBasedBeneficiary } from '../utils/stringUtils';\nimport { PROCESS_STAGE, API_URLS, ALLOWED_NAME_EDITS, ERROR_CODE, ID_TYPE } from '../constants';\n\nconst filterBeneficiary = (state, beneficiaryList) => {\n  const paramsName = getFirstName(state.name);\n  const paramsDisplayName = getFirstName(state.displayName);\n  const { id_type: idType, id_number: idNumber='' } = state;\n  const maskedIdNumber = idNumber.slice(-4);\n\n  const idMatchRecord = _.find(beneficiaryList, (entry) => {\n    const entryIdType = ID_TYPE[entry.photo_id_type];\n    const entryIdNumber = _.get(entry, 'photo_id_number', '').slice(-4);\n\n    return idType === entryIdType && maskedIdNumber === entryIdNumber;\n  });\n  if (!_.isEmpty(idMatchRecord)) {\n    return idMatchRecord;\n  }\n\n  const verifiedNameMatchedBeneficiary = _.find(beneficiaryList, (entry) => {\n    const { name } = entry;\n    const firstName = getFirstName(name);\n    const editDistance = getEditDistance(paramsName, firstName);\n    return editDistance < ALLOWED_NAME_EDITS;\n  });\n  if (!_.isEmpty(verifiedNameMatchedBeneficiary)) {\n    return verifiedNameMatchedBeneficiary;\n  }\n\n  const profileNameMatchedBeneficiary = _.find(beneficiaryList, ({ name }) => {\n    const firstName = getFirstName(name);\n    const editDistanceScore = getEditDistance(paramsDisplayName, firstName);\n    return editDistanceScore < ALLOWED_NAME_EDITS;\n  });\n  if (!_.isEmpty(profileNameMatchedBeneficiary)) {\n    return profileNameMatchedBeneficiary;\n  }\n\n  return getStringSimilarityBasedBeneficiary(beneficiaryList, state.name);\n};\n\nconst getBeneficiaryDetailsEntity = (beneficiaryList) => {\n  return _.map(beneficiaryList, (beneficiary) => {\n    return {\n      beneficiary_id: beneficiary.beneficiary_reference_id,\n      name: beneficiary.name,\n      vaccine: beneficiary.vaccine,\n      vaccination_status: beneficiary.vaccination_status,\n      dose1_date: beneficiary.dose1_date,\n      dose2_date: beneficiary.dose2_date,\n      };\n  });\n};\n\nexport const fetchBenficiaries = async (state, stateCallback) => {\n  try {\n    const data = await makeGetCall(API_URLS.FETCH_BENEFICIARY, stateCallback, state.token);\n    const beneficiaryList = _.get(data, 'beneficiaries', []);\n    const beneficiaryDetails = filterBeneficiary(state, beneficiaryList);\n    if (_.isEmpty(beneficiaryDetails)) {\n      stateCallback({\n        stage: PROCESS_STAGE.NOT_REGISTERED,\n        registeredBeneficiaryList: getBeneficiaryDetailsEntity(beneficiaryList)\n      });\n      return;\n    }\n    // TODO: Need to be changed later for dose 2 \n    if (!_.isEmpty(beneficiaryDetails.dose1_date) || !_.isEmpty(beneficiaryDetails.dose2_date)) {\n      stateCallback({stage: PROCESS_STAGE.VACCINATED, beneficiaryDetails });\n      return;\n    }\n    if (!_.isEmpty(beneficiaryDetails.appointments)) {\n      stateCallback({stage: PROCESS_STAGE.EXISTING_BOOKING, beneficiaryDetails });\n      return;\n    }\n    stateCallback({stage: PROCESS_STAGE.FETCH_SLOTS, beneficiaryDetails });\n  } catch(err) {\n\n  }\n};","import * as _ from 'lodash';\nimport { makeGetCall, makePostCall } from '../utils/network';\nimport { getCurrentDateString, getSlotDateString } from '../utils/stringUtils';\nimport { PROCESS_STAGE, API_URLS, SLOT_FILTER, ERROR_CODE } from '../constants';\n\nconst getTargetSlotTime = (availableSession) => {\n  const slotDate = availableSession.date;\n  const currentDateString = getCurrentDateString();\n\n  if (currentDateString !== slotDate) {\n    return availableSession.slots[0];\n  }\n  return _.last(availableSession.slots);\n};\n\nconst getAvailableVaccineSlot = (state, centerList) => {\n  const lastAttemptedSession = _.get(state, 'vaccineSlot.session_id');\n  const availableSlots = [];\n  _.forEach(centerList, (center) => {\n    const { sessions } = center;\n    const availableSessions = _.filter(sessions, (session) => {\n      // TODO: Update to param based dose check later\n      const centerAvailability = _.get(session, 'available_capacity', 0);\n      const dose1Availability = _.get(session, 'available_capacity_dose1', 0);\n      return centerAvailability > 0 && dose1Availability >= SLOT_FILTER.MIN_CAPACITY &&\n        session.min_age_limit === SLOT_FILTER.MIN_AGE && session.session_id !== lastAttemptedSession;\n    });\n    const maxAvailabilitySession = _.maxBy(availableSessions, 'available_capacity_dose1');\n\n    if (maxAvailabilitySession) {\n      const targetSlot = getTargetSlotTime(maxAvailabilitySession);\n      availableSlots.push({\n        ...center,\n        ...maxAvailabilitySession,\n        slot_time: targetSlot\n      });\n    }\n  });\n  const selectedSlot = _.maxBy(availableSlots, 'available_capacity_dose1');\n\n  return selectedSlot;\n};\n\nexport const fetchSlots = async(state, stateCallback) => {\n  const { district } = state;\n  if (!district) {\n    stateCallback({ stage: PROCESS_STAGE.REGISTERED });\n    return;\n  }\n  const dateString = getSlotDateString();\n  try {\n    const data = await makeGetCall(`${API_URLS.FETCH_SLOTS}?district_id=${district}&date=${dateString}`,\n     stateCallback, state.token);\n    const centerList = _.get(data, 'centers', []);\n    const vaccineSlot = getAvailableVaccineSlot(state, centerList);\n    if (_.isEmpty(vaccineSlot)) {\n      stateCallback({errorObj: { code: ERROR_CODE.NO_SLOT, message: `No available slot found for district ${district}`} })\n      return;\n    }\n    stateCallback({ stage: PROCESS_STAGE.TRIGGER_CAPTCHA, vaccineSlot })\n  } catch(err) {\n\n  }\n};","import * as qs from 'qs';\n\nexport function getSearchParamsFromUrl(queryString) {\n  const searchParams = qs.parse(queryString, { ignoreQueryPrefix: true });\n  return searchParams || {};\n}\n\nexport function getUrlParamsFromObj(obj) {\n  const urlParams = qs.stringify(obj);\n  return urlParams;\n}","import { getUrlParamsFromObj } from '../utils/queryParams';\nimport { ERROR_CODE, PROCESS_STAGE, MAX_BENEFICIARY_ALLOWED } from '../constants';\nimport * as _ from 'lodash';\n\nexport const triggerCallback = (state, callbackDelay=3000) => {\n  const callbackParams = getCallbackParams(state);\n  const appState = getAppState(state.stage);\n  const requestBody = {\n    ...callbackParams,\n    auth_key: state.auth_key,\n    phone: state.phone || state.registeredPhone,\n    alternatePhone: state.registeredPhone,\n    app_state: appState\n  }\n  const queryString = getUrlParamsFromObj(requestBody);\n  window.setTimeout(function() {\n    window.location.href = `${state.callback}?${queryString}`;\n  }, callbackDelay);\n};\n\nconst getCallbackParams = (state) => {\n  const { beneficiaryDetails={} } = state;\n  const errorObj = getErrorParams(state);\n  const metaData = getMetaDataParams(state);\n  const baseState = {\n    beneficiary_id: beneficiaryDetails.beneficiary_reference_id,\n    name: beneficiaryDetails.name,\n    vaccine: beneficiaryDetails.vaccine,\n    vaccination_status: beneficiaryDetails.vaccination_status,\n    dose_1_date: beneficiaryDetails.dose1_date,\n    dose_2_date: beneficiaryDetails.dose2_date,\n    err_code: errorObj.code,\n    err_message: errorObj.message,\n    meta_data: JSON.stringify(metaData)\n  };\n\n  switch(state.stage) {\n    case PROCESS_STAGE.EXISTING_BOOKING:\n      const { appointments=[] } = beneficiaryDetails;\n      const lastAppointment = _.last(appointments) || {};\n      return {\n        ...baseState,\n        center_id: lastAppointment.center_id,\n        center_name: lastAppointment.name,\n        slot: lastAppointment.slot,\n        session_id: lastAppointment.session_id,\n        date: lastAppointment.date,\n        dose: lastAppointment.dose,\n        appointment_id: lastAppointment.appointment_id\n      };\n    case PROCESS_STAGE.SLOT_BOOKED:\n      const { vaccineSlot={}, appointmentId } = state;\n      const vaccineFee = getVaccineFee(vaccineSlot);\n      return {\n        ...baseState,\n        appointment_id: appointmentId,\n        center_id: vaccineSlot.center_id,\n        center_name: vaccineSlot.name,\n        center_address: vaccineSlot.address,\n        center_district_name: vaccineSlot.district_name,\n        center_pincode: vaccineSlot.pincode,\n        slot: vaccineSlot.slot_time,\n        session_id: vaccineSlot.session_id,\n        date: vaccineSlot.date,\n        vaccine_fee: vaccineFee,\n        vaccine: vaccineSlot.vaccine,\n        // TODO dose 2 handling\n        dose: 1\n      };\n    default:\n      return baseState;\n  }\n};\n\nconst getErrorParams = (state) => {\n  if (state.stage === PROCESS_STAGE.SLOT_BOOKED) {\n    return {};\n  }\n\n  if (state.stage === PROCESS_STAGE.NOT_REGISTERED) {\n    return !_.isEmpty(state.errorObj) ? state.errorObj : {\n      code: ERROR_CODE.NO_BENEFICIARY,\n      message: _.join(_.map(state.registeredBeneficiaryList, 'name'), ',')\n    };\n  }\n  return state.errorObj || {};\n};\n\nconst getAppState = (stage) => {\n  if (stage === PROCESS_STAGE.NOT_REGISTERED) {\n    return PROCESS_STAGE.ERROR;\n  }\n\n  return stage\n};\n\nconst getVaccineFee = (vaccineSlot = {}) => {\n  const vaccineFeeRates = _.get(vaccineSlot, 'vaccine_fees', []);\n  const selectedVaccineRate = _.find(vaccineFeeRates, (entry = {}) => {\n    return entry.vaccine === vaccineSlot.vaccine;\n  });\n  return _.get(selectedVaccineRate, 'fee', '0');\n};\n\nconst getMetaDataParams = (state) => {\n  if (state.stage === PROCESS_STAGE.NOT_REGISTERED) {\n    return { available_beneficiaries: _.slice(state.registeredBeneficiaryList, 0, MAX_BENEFICIARY_ALLOWED) };\n  }\n  return {};\n}","export default __webpack_public_path__ + \"static/media/build4bharat.06144520.jpg\";","import React, { useState, useEffect } from 'react';\nimport { withRouter } from \"react-router\";\nimport * as _ from 'lodash';\nimport { SECRET_KEYS, PROCESS_STAGE, API_URLS, ERROR_CODE, COWIN_ERROR_CODE,\n  OTP_RETRY_TIME, MAX_BOOKING_ATTEMPT, INVALID_PHONE_REASONS_TEXT, DEFAULT_AUTO_CALLBACK_STATE } from './constants';\nimport Card from '@material-ui/core/Card';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makePostCall } from './utils/network';\nimport { fetchBenficiaries } from './booking/beneficiary';\nimport { fetchSlots } from './booking/slot';\nimport { getSearchParamsFromUrl } from './utils/queryParams';\nimport { triggerCallback } from './webCallback';\nimport Image from './assests/build4bharat.jpg';\nimport Box from '@material-ui/core/Box';\nimport { renderOtpStage, renderCaptchStage, renderSuccessStage, renderExistingBookingStage,\nrenderBookingFailedStage, renderVaccinatedStage, renderErrorStage, renderRegisteredStage, renderNotRegiseteredState, renderAlternatePhoneInitState } from './stateView';\nconst shajs = require('sha.js');\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: '#B2EBFE',\n    width: '100%'\n  },\n  image: {\n    overflowY: 'hidden',\n    width: '100%'\n  },\n  card: {\n    flexGrow: 1,\n    width: '90%',\n    minHeight: '25%',\n    margin: 'auto',\n    padding: '5%',\n    position: 'absolute',\n    bottom: 0\n  },\n  button: {\n    marginTop: 10\n  },\n  goHomeButton: {\n    marginTop: 20\n  },\n  body: {\n    marginTop: '5%',\n  }\n});\n\nfunction getRandomSecretKey() {\n  const index = parseInt((Math.random()*10))%6;\n  return SECRET_KEYS[index];\n}\n\nfunction App(props) {\n  const searchParams = getSearchParamsFromUrl(props.location.search);\n  const initialStage = _.isEmpty(searchParams.phone) ? PROCESS_STAGE.ALTERNATE_PHONE_INIT : PROCESS_STAGE.INIT;\n  const [state, setState] = useState({...searchParams,\n    stage: initialStage, otp: '', captcha: '', registeredPhone: _.get(searchParams, 'phone'),\n    lastPhone: _.get(searchParams, 'phone'), registeredBeneficiaryList: [] });\n  const [retryTime, setRetryTime] = useState(OTP_RETRY_TIME);\n  const [bookingAttempt, setBookingAttempt] = useState(1);\n  const [autoCallBackState, setAutoCallBackState] = useState(DEFAULT_AUTO_CALLBACK_STATE);\n\n  const stateCallback = (updatedState) => {\n    setState({...state, ...updatedState});\n  };\n  const changeOtp = (otp) => {\n    setState({...state, otp});\n  };\n  const changeCaptcha = (captcha) => {\n    setState({...state, captcha});\n  };\n  const triggerOtp = async () => {\n    const secretKey = getRandomSecretKey();\n    setRetryTime(OTP_RETRY_TIME);\n    try {\n      const data = await makePostCall(API_URLS.INIT, {\n        \"mobile\": state.registeredPhone,\n        \"secret\": secretKey\n      }, stateCallback);\n      setState({...state, txnId: data.txnId, stage: PROCESS_STAGE.VALIDATE_OTP});\n    } catch(err) {\n      \n    }\n  };\n  const submitOtp = async () => {\n    const otpHash = shajs('sha256').update(state.otp).digest('hex');\n    try {\n      const data = await makePostCall(API_URLS.VALIDATE_OTP, {\n        \"otp\": otpHash,\n        \"txnId\": state.txnId\n      }, stateCallback);\n      setState({...state, token: data.token, errorObj: {}, stage: PROCESS_STAGE.FETCH_BENEFICIARY });\n    } catch(err) {\n    }\n  };\n  const submitCaptcha = async () => {\n    try {\n      const data = await makePostCall(API_URLS.SCHEDULE, {\n        \"captcha\": state.captcha,\n        \"beneficiaries\": [state.beneficiaryDetails.beneficiary_reference_id],\n        \"center_id\": state.vaccineSlot.center_id,\n        \"slot\": state.vaccineSlot.slot_time,\n        \"session_id\": state.vaccineSlot.session_id,\n        \"dose\": _.isEmpty(state.beneficiaryDetails.dose1_date)?1:2\n      }, stateCallback, state.token);\n      const appointmentId = _.get(data, 'appointment_confirmation_no');\n      if (!_.isEmpty(appointmentId)) {\n        setState({...state, errorObj:{}, stage: PROCESS_STAGE.SLOT_BOOKED, appointmentId })\n      } else {\n        setState({...state, errorObj:{ code: ERROR_CODE.BOOKING_FAILED, message: 'Appointment not confirmed' } })\n      }\n    } catch(err) {\n    }\n  };\n  const triggerCaptcha = async () => {\n    try {\n      const data = await makePostCall(API_URLS.TRIGGER_CAPTCHA, {},\n      stateCallback, state.token);\n      const svg = _.get(data, 'captcha');\n      setState({...state, stage: PROCESS_STAGE.SCHEDULE, svg })\n    } catch(err) {\n\n    }\n  };\n\n  const changeRegisteredPhone = (registeredPhone) => {\n    setState({ ...state, registeredPhone });\n  };\n\n  const submitRegisteredPhone =  () => {\n    const activePhone = state.registeredPhone;\n    if (_.size(activePhone) !== 10) {\n      setState({ ...state, errorObj: {\n        code: ERROR_CODE.INVALID_PHONE,\n        message: INVALID_PHONE_REASONS_TEXT.DEFAULT\n      }});\n      return;\n    }\n\n    setState({ ...state, stage: PROCESS_STAGE.INIT, lastPhone: state.registeredPhone });\n  };\n\n  const enterAlternatePhoneInitStage = () => {\n    setState({ ...state, \n      stage: PROCESS_STAGE.ALTERNATE_PHONE_INIT,\n      otp: '',\n      errorObj: null,\n      registeredPhone: ''\n    });\n  };\n\n  const goToHome = () => {\n    triggerCallback(state, 0);\n  };\n\n  const renderErrorItem = () => {\n    if (_.isEmpty(_.get(state.errorObj, 'message')) || _.get(state, 'stage') === PROCESS_STAGE.NOT_REGISTERED) {\n      return null;\n    }\n    return (\n      <Grid alignItems=\"center\" justify=\"center\">\n        <Grid item lg={12}>\n        <Typography color=\"error\">\n          <Box fontWeight=\"fontWeightBold\">\n            {state.errorObj.message}\n          </Box>\n          </Typography>\n        </Grid>\n      </Grid>\n    )\n  };\n  const getRenderView = (classes) => {\n      switch(state.stage) {\n      case PROCESS_STAGE.FETCH_SLOTS:\n        return renderCaptchStage(state, classes, changeCaptcha, submitCaptcha);\n      case PROCESS_STAGE.SCHEDULE:\n        return renderCaptchStage(state, classes, changeCaptcha, submitCaptcha);\n      case PROCESS_STAGE.SLOT_BOOKED:\n        return renderSuccessStage(classes);\n      case PROCESS_STAGE.VACCINATED:\n        return renderVaccinatedStage(classes);  \n      case PROCESS_STAGE.EXISTING_BOOKING:\n        return renderExistingBookingStage(classes);    \n      case PROCESS_STAGE.BOOKING_FAILED:\n        return renderBookingFailedStage(state, bookingAttempt, classes);\n      case PROCESS_STAGE.ERROR:\n        return renderErrorStage(state, classes);\n      case PROCESS_STAGE.REGISTERED:\n        return renderRegisteredStage(classes);\n      case PROCESS_STAGE.NOT_REGISTERED:\n        return renderNotRegiseteredState({ classes, registeredPhone: state.registeredPhone, \n          enterAlternatePhoneInitStage, goToHome, autoCallBackState });\n      case PROCESS_STAGE.ALTERNATE_PHONE_INIT:\n        return renderAlternatePhoneInitState(classes, state, submitRegisteredPhone, changeRegisteredPhone);\n      default:\n        return renderOtpStage({state, retryTime, classes, changeOtp, submitOtp, triggerOtp, enterAlternatePhoneInitStage});\n    }\n  }\n  const handleBookingFailure = () => {\n    setState({...state, errorObj: {}, stage: PROCESS_STAGE.BOOKING_FAILED});\n    if (bookingAttempt < MAX_BOOKING_ATTEMPT) {\n      const intervalId = setTimeout(() => {\n        setBookingAttempt(bookingAttempt+1);\n      }, 3000);\n      return () => clearInterval(intervalId);\n    } else {\n      triggerCallback({...state, stage: PROCESS_STAGE.BOOKING_FAILED});\n    }\n  };\n  useEffect(() => {\n    switch(state.stage) {\n      case PROCESS_STAGE.INIT:\n        if (state.registeredPhone) {\n          triggerOtp();\n        }\n        break;\n      case PROCESS_STAGE.TRIGGER_CAPTCHA:\n        triggerCaptcha();\n        break;\n      case PROCESS_STAGE.FETCH_BENEFICIARY:\n        fetchBenficiaries(state, stateCallback);\n        break;\n      case PROCESS_STAGE.FETCH_SLOTS:\n        fetchSlots(state, stateCallback);\n        break;\n      case PROCESS_STAGE.SLOT_BOOKED:\n      case PROCESS_STAGE.VACCINATED:\n      case PROCESS_STAGE.EXISTING_BOOKING:\n      case PROCESS_STAGE.REGISTERED:\n      case PROCESS_STAGE.ERROR:\n        triggerCallback(state);\n        break;\n      case PROCESS_STAGE.NOT_REGISTERED:\n        setAutoCallBackState({ ...DEFAULT_AUTO_CALLBACK_STATE, isTimerOn: true });\n        return;\n      default:\n        break;\n    }\n\n    setAutoCallBackState(DEFAULT_AUTO_CALLBACK_STATE);\n  }, [state.stage]);\n  useEffect(() => {\n    const code = _.get(state.errorObj, 'code');\n    if (!code) {\n      return;\n    }\n\n    switch (state.stage) {\n      case PROCESS_STAGE.FETCH_BENEFICIARY:\n        setState({ ...state, stage: PROCESS_STAGE.NOT_REGISTERED });\n        return;\n      default: break;\n    };\n\n    switch(state.errorObj.code) {\n      case ERROR_CODE.INVALID_PHONE:\n        return;\n      case COWIN_ERROR_CODE[ERROR_CODE.INVALID_OTP]:\n        return;\n      case COWIN_ERROR_CODE[ERROR_CODE.INVALID_CAPTCHA]:\n        triggerCaptcha();\n        return;  \n      case COWIN_ERROR_CODE[ERROR_CODE.EXISTING_BOOKING]:\n        setState({...state, stage: PROCESS_STAGE.EXISTING_BOOKING });\n        return;\n      case COWIN_ERROR_CODE[ERROR_CODE.NO_BENEFICIARY]:\n        setState({ ...state, stage: PROCESS_STAGE.NOT_REGISTERED });\n        return;\n      case ERROR_CODE.NO_SLOT:\n        handleBookingFailure();\n        return;\n      case ERROR_CODE.NO_BENEFICIARY:\n        return;\n      default:\n        if (state.stage === PROCESS_STAGE.SCHEDULE) {\n          handleBookingFailure();\n        } else {\n          setState({...state, stage: PROCESS_STAGE.ERROR });\n        }\n       return;\n    };\n  }, [state.errorObj]);\n  useEffect(() => {\n    if (!retryTime) return;\n    const intervalId = setTimeout(() => {\n      setRetryTime(retryTime-1);\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [retryTime])\n  useEffect(() => {\n    if (state.stage === PROCESS_STAGE.BOOKING_FAILED) {\n      setState({...state, errorObj: {}, captcha:'', stage: PROCESS_STAGE.FETCH_SLOTS});\n    }\n  }, [bookingAttempt])\n  useEffect(() => {\n    if (!autoCallBackState.isTimerOn) {\n      return;\n    }\n    if (autoCallBackState.callBackDelayInSeconds <= 0) {\n      triggerCallback(state, 0);\n      return;\n    }\n\n    const intervalId = setTimeout(() => {\n      setAutoCallBackState({\n        ...autoCallBackState,\n        callBackDelayInSeconds: autoCallBackState.callBackDelayInSeconds - 1\n      });\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [autoCallBackState])\n\n  const classes = useStyles();\n  const renderView = getRenderView(classes);\n  const errorItem = renderErrorItem(); \n  return (\n    <div className={classes.root}>\n      <img src={`${Image}`} className={classes.image} />\n      <Card className={classes.card}>\n        {errorItem}\n        {state.isLoading && <CircularProgress />}\n        {renderView}\n      </Card>\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Route path=\"/\" component={App} />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as _ from 'lodash';\nimport * as stringSimilarity from 'string-similarity';\nconst MAX_STRING_CHECK = 50;\nconst MIN_STRING_SIMILARITY = 0.7;\n\nexport const getFirstName = (name) => {\n  const lowerName = _.toLower(name);\n  return _.find(_.split(lowerName, /\\s|\\.|\\,/), (word) => {\n    return _.size(word) > 2;\n  });\n};\n\n// Levenshtein distance\nexport const getEditDistance = (firstString, secondString) => {\n  const lengthFirstString = _.size(firstString);\n  const lengthSecondString = _.size(secondString);\n  if (lengthSecondString > MAX_STRING_CHECK ||  lengthFirstString > MAX_STRING_CHECK) {\n    return MAX_STRING_CHECK;\n  }\n\n  const costs = [];\n  _.forEach(_.range(0, lengthFirstString+1), (indexFirst) => {\n    costs[indexFirst] = [indexFirst];\n  });\n  _.forEach(_.range(0, lengthSecondString+1), (indexSecond) => {\n    costs[0][indexSecond] = indexSecond;\n  });\n\n  _.forEach(_.range(1, lengthFirstString+1), (indexFirst) => {\n    _.forEach(_.range(1, lengthSecondString+1), (indexSecond) => {\n     if (firstString[indexFirst - 1] === secondString[indexSecond - 1]){\n        costs[indexFirst][indexSecond] = costs[indexFirst-1][indexSecond-1];\n      } else {\n        costs[indexFirst][indexSecond] =  Math.min(costs[indexFirst-1][indexSecond-1] + 1,\n          Math.min(costs[indexFirst][indexSecond-1] + 1,\n            costs[indexFirst-1][indexSecond] + 1))\n      }\n    })\n  });\n\n  return costs[lengthFirstString][lengthSecondString];\n};\n\nexport const getCurrentDateString = () => {\n  const today = new Date();\n  const dd = today.getDate();\n  const mm = today.getMonth() + 1;\n  const yyyy = today.getFullYear();\n\n  return `${(dd>9 ? '' : '0') + dd}-${(mm>9 ? '' : '0') + mm}-${yyyy}`;\n};\n\nexport const getSlotDateString = () => {\n  const today = new Date();\n  const nextDay = new Date(today);\n  nextDay.setDate(today.getDate() + 1);\n  const dd = nextDay.getDate();\n  const mm = nextDay.getMonth() + 1;\n  const yyyy = nextDay.getFullYear();\n\n  return `${dd}-${(mm>9 ? '' : '0') + mm}-${yyyy}`;\n};\n\nexport const getMinuteString = (seconds) => {\n  return new Date(seconds * 1000).toISOString().substr(14, 5);\n};\n\nexport const getStringSimilarityBasedBeneficiary = (beneficiaryList, verifiedName) => {\n  if (_.isEmpty(beneficiaryList)) {\n    return undefined;\n  }\n  const beneficiaryNamesLowerCase = _.map(beneficiaryList, ({ name }) => {\n    return _.toLower(name);\n  });\n  const verifiedNameLowerCase = _.toLower(verifiedName);\n  const bestMatchResults = stringSimilarity.findBestMatch(verifiedNameLowerCase, beneficiaryNamesLowerCase);\n  const { bestMatch={}, bestMatchIndex } = bestMatchResults;\n  const { rating=0 } = bestMatch;\n  if (rating > MIN_STRING_SIMILARITY) {\n    return beneficiaryList[bestMatchIndex];\n  }\n  return undefined;\n}","import React from 'react';\nimport * as _ from 'lodash';\nimport { OTP_RETRY_TIME, MAX_BOOKING_ATTEMPT, ERROR_CODE, COWIN_ERROR_CODE, PROCESS_STAGE } from '../constants';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { getMinuteString } from '../utils/stringUtils';\nimport Box from '@material-ui/core/Box';\n\nconst getRedirectElement = (classes) => {\n  return (<div className={classes.body}>\n    <Typography>\n    ⌛ Taking you back...\n    </Typography>\n  </div>)\n};\n\nconst getRetryElement = (classes) => {\n  return (<div className={classes.body}>\n    <Typography>\n    ⌛ Retrying some other slot...\n    </Typography>\n  </div>)\n};\n\nexport const renderOtpStage = (params) => {\n  const { state, retryTime, classes, changeOtp, submitOtp, triggerOtp, enterAlternatePhoneInitStage } = params;\n  const retryEnabled = (retryTime < 1);\n  const retryTimeString = getMinuteString(retryTime);\n  return (\n    <Grid alignItems=\"center\" justify=\"center\">\n      <Grid item lg={12}>\n        <Typography variant=\"body2\">\n          <Box fontWeight=\"fontWeightBold\">\n            LOGIN\n          </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        <Typography variant=\"h6\">\n        <Box fontWeight=\"fontWeightBold\">\n          Enter OTP\n        </Box>\n        </Typography>\n        <Typography variant='subtitle2'>\n          <Box my={2}>\n            <Box>\n              OTP sent to {state.registeredPhone}\n            </Box>\n            <Link onClick={enterAlternatePhoneInitStage}>\n              Vaccine registered on different number?\n            </Link>\n          </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        <TextField maxLength={6} type=\"number\" id=\"otp\" label=\"6-digit OTP\" variant=\"outlined\" value={state.otp} onChange={e => changeOtp(e.target.value)} />\n      </Grid>\n      <Grid container justify=\"space-between\">\n        <Grid item lg={6}>\n        <Button className={classes.button} id=\"otp\" variant=\"contained\" color=\"primary\" onClick={submitOtp}\n          disabled={state.isLoading}>\n          Submit OTP\n        </Button>\n        </Grid>\n        <Grid item lg={6}>\n        <Button className={classes.button} id=\"otp\" variant=\"contained\"\n          color={retryEnabled?\"primary\":\"default\"}\n          onClick={triggerOtp}\n          disabled={!retryEnabled || state.isLoading}>\n          {`Retry ${retryEnabled?'':'('+retryTimeString+')'}`}\n        </Button>\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n};\n\nexport const renderCaptchStage = (state, classes, changeCaptcha, submitCaptcha) => {\n  if (!state.svg) {\n    return undefined;\n  }\n  const buff = new Buffer(state.svg);\n  const base64data = buff.toString('base64');\n  return (\n    <Grid alignItems=\"center\" justify=\"center\">\n      <Grid item lg={12}>\n        <Typography variant=\"body2\">\n          <Box fontWeight=\"fontWeightBold\">\n            Book Slot\n          </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        <Typography variant=\"h6\">\n        <Box fontWeight=\"fontWeightBold\">\n          Enter the characters you see in the image\n        </Box>\n      </Typography>\n    </Grid>\n    <Grid item lg={12}>\n      <img src={`data:image/svg+xml;base64,${base64data}`} />\n    </Grid>\n    <Grid item lg={12}>\n      <TextField maxLength={6} id=\"captcha\" variant=\"outlined\" type=\"text\" maxLength={6} name=\"Enter Captcha\" value={state.captcha} onChange={e => changeCaptcha(e.target.value)} />\n    </Grid>\n    <Grid item lg={12}>\n      <Button className={classes.button} id=\"captcha\" onClick={submitCaptcha} variant=\"contained\" color=\"primary\"\n        disabled={state.isLoading}>\n        Book Vaccination\n      </Button>\n    </Grid>\n  </Grid>\n  )\n};\n\nexport const renderSuccessStage = (classes) => {\n  return (\n    <Grid alignItems=\"center\" justify=\"center\">\n      <Grid item lg={12}>\n        <Typography variant=\"body2\">\n          <Box fontWeight=\"fontWeightBold\" color=\"success.main\">\n            SLOT BOOKED\n          </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        <Typography variant=\"h6\">\n        <Box fontWeight=\"fontWeightBold\">\n          Your vaccinated slot has been booked\n        </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        {getRedirectElement(classes)}\n      </Grid>\n    </Grid>\n  )\n};\n\nexport const renderVaccinatedStage = (classes) => {\n  return (\n    <Grid alignItems=\"center\" justify=\"center\">\n      <Grid item lg={12}>\n        <Typography variant=\"body2\">\n          <Box fontWeight=\"fontWeightBold\" color=\"success.main\">\n            VACCINATED\n          </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        <Typography variant=\"h6\">\n        <Box fontWeight=\"fontWeightBold\">\n          You have been vaccinated\n        </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        {getRedirectElement(classes)}\n      </Grid>\n    </Grid>\n  )\n};\n\nexport const renderExistingBookingStage = (classes) => {\n  return (\n    <Grid alignItems=\"center\" justify=\"center\">\n      <Grid item lg={12}>\n        <Typography variant=\"body2\">\n          <Box fontWeight=\"fontWeightBold\" color=\"success.main\">\n            SLOT BOOKED\n          </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        <Typography variant=\"h6\">\n        <Box fontWeight=\"fontWeightBold\">\n          You have a slot booking\n        </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        {getRedirectElement(classes)}\n      </Grid>\n    </Grid>\n  )\n};\n\nconst getBookingActionElement = (bookingAttempt, classes) => {\n  if (bookingAttempt < MAX_BOOKING_ATTEMPT) {\n    return getRetryElement(classes);\n  }\n  return getRedirectElement(classes);\n}\n\nexport const renderBookingFailedStage = (state, bookingAttempt, classes) => {\n  const bookingActionElement = getBookingActionElement(bookingAttempt, classes);\n\n  return (\n    <Grid alignItems=\"center\" justify=\"center\">\n      <Grid item lg={12}>\n        <Typography variant=\"body2\">\n          <Box fontWeight=\"fontWeightBold\" color=\"secondary.main\">\n            BOOKING FAILED\n          </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        <Typography variant=\"h6\">\n        <Box fontWeight=\"fontWeightBold\">\n          All slots booked before your booking\n        </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        {bookingActionElement}\n      </Grid>\n    </Grid>\n  )\n};\n\nconst getErrorMessage = (state) => {\n  const errCode = _.get(state.errorObj, 'code');\n  if (errCode === ERROR_CODE.NO_BENEFICIARY || errCode === COWIN_ERROR_CODE.NO_BENEFICIARY) {\n    return (<Typography variant=\"h6\">\n    <Box fontWeight=\"fontWeightBold\">\n      Your registration on CoWin Portal is pending.\n      Please register first so that you can book slots.\n    </Box>\n    </Typography>);\n  }\n  return (<Typography variant=\"body2\">\n    <Box fontWeight=\"fontWeightBold\" color=\"secondary.main\">\n      SOMETHING WENT WRONG\n    </Box>\n  </Typography>);\n};\n\nexport const renderErrorStage = (state, classes) => {\n  const errorMessage = getErrorMessage(state);\n  return (\n    <Grid alignItems=\"center\" justify=\"center\">\n      <Grid item lg={12}>\n        {errorMessage}\n      </Grid>\n      <Grid item lg={12}>\n        {getRedirectElement(classes)}\n      </Grid>\n    </Grid>\n  )\n};\n\nexport const renderRegisteredStage = (classes) => {\n  return (\n    <Grid alignItems=\"center\" justify=\"center\">\n      <Grid item lg={12}>\n        <Typography variant=\"body2\">\n          <Box fontWeight=\"fontWeightBold\" color=\"success.main\">\n            STATUS CONFIRMED\n          </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        <Typography variant=\"h6\">\n        <Box fontWeight=\"fontWeightBold\">\n          You have registered on CoWin portal. Please book a slot for vaccination soon.\n        </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        {getRedirectElement(classes)}\n      </Grid>\n    </Grid>\n  )\n};\n\nexport const renderNotRegiseteredState = (params) => {\n  const { classes, registeredPhone, enterAlternatePhoneInitStage, goToHome, autoCallBackState } = params;\n  return (\n    <Grid alignItems=\"center\" justify=\"center\">\n      <Grid item lg={12}>\n        <Typography variant=\"subtitle2\">\n          <Box color=\"#FF0000\" fontWeight=\"fontWeightBold\">\n            Vaccination pending\n          </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        <Typography variant=\"h6\">\n            <Box fontWeight=\"fontWeightBold\" my={2}>\n              No vaccination registration found for {registeredPhone}\n              {autoCallBackState.isTimerOn &&\n                <Typography>\n                  ⌛ Taking you back in {autoCallBackState.callBackDelayInSeconds}\n                </Typography>\n              }\n            </Box>\n        </Typography>\n      </Grid>\n      <Grid container justify=\"center\" alignItems=\"center\" direction=\"column\">\n        <Button className={classes.button}\n          variant=\"contained\"\n          color=\"primary\"\n          //size=\"large\"\n          fullWidth={true}\n          onClick={enterAlternatePhoneInitStage}>\n            <Typography variant=\"subtitle2\">\n              Vaccine registered on different number?\n            </Typography>\n        </Button>\n        <Button className={classes.goHomeButton}\n          variant=\"contained\"\n          color=\"primary\"\n          //size=\"small\"\n          fullWidth={true}\n          onClick={goToHome}>\n            <Typography variant=\"subtitle2\">\n              Go to home\n            </Typography>\n        </Button>\n      </Grid>\n    </Grid>\n  )\n};\n\nexport const renderAlternatePhoneInitState = (classes, state, submitRegisteredPhone, changeRegisteredPhone) => {\n  return (\n    <Grid alignItems=\"center\" justify=\"center\" direction=\"column\">\n      <Grid item lg={12}>\n        <Typography variant=\"h6\">\n            <Box fontWeight=\"fontWeightBold\" my={2}>\n              Enter vaccination registration phone number\n            </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        <TextField\n          maxLength={10}\n          fullWidth={true}\n          size=\"small\"\n          type=\"number\"\n          id=\"alternatePhone\"\n          label=\"Phone number\"\n          variant=\"outlined\"\n          value={state.registeredPhone}\n          onChange={e => changeRegisteredPhone(e.target.value)}\n        />\n      </Grid>\n      <Grid item lg={12}>\n        <Button className={classes.button}\n          variant=\"contained\"\n          color=\"primary\"\n          fullWidth={true}\n          id=\"submitRegisteredPhone\"\n          onClick={submitRegisteredPhone}>\n          <Typography variant=\"subtitle1\">\n              Send OTP\n          </Typography>\n        </Button>\n      </Grid>\n    </Grid>\n  )\n};","\nexport const SECRET_KEYS = [\n  'U2FsdGVkX1/fkazU2I2Rdz3hI7iWT6HRzThZj16rpyn4xYM6wcbd84k4CpJimxC0YpG3kFn9qog6LhmaRoS14g==',\n  'U2FsdGVkX19I0TpTI50qTW+0o+LEWSBPYIcivZR4gvANVyLhRhP+rwapNMmyE3tE7e2EeEIV8X6YVfOODlCUbg==',\n  'U2FsdGVkX181DnPRmCbp6NePNHeHRfh3dAO9dMMSApKdvNpIEcK11CYuqjyI04DU4TRuktcSduxWej8OGCz9ZA==',\n  'U2FsdGVkX19NYwIf1jzNr2ghhC7bH1/H36TLGsiUKSopzfhdHB4aSa2RczWmSdN35ZwZXJ18cha9qX1vLO1BpQ==',\n  'U2FsdGVkX18kqQVkl8zGUA8schCVAm6NWNM0q/bCV7dHyUJoy8JPbRms4IIsFNU4Ahx6ffx0FVYsOIatS98WjA==',\n  \"U2FsdGVkX18y9RiV+sdQG+dNc09ETZfLddhx6sEu10zP07S14C9X4cdXXRtwJ+Pa+x2zycwllBLV9opSgQ9Cjg==\"\n];\n\nexport const PROCESS_STAGE = {\n  INIT: 'INIT',\n  VALIDATE_OTP: 'VALIDATE_OTP',\n  FETCH_BENEFICIARY: 'FETCH_BENEFICIARY',\n  FETCH_SLOTS: 'FETCH_SLOTS',\n  TRIGGER_CAPTCHA: 'TRIGGER_CAPTCHA',\n  SCHEDULE: 'SCHEDULE',\n  SLOT_BOOKED: 'SLOT_BOOKED',\n  ERROR: 'ERROR',\n  EXISTING_BOOKING: 'EXISTING_BOOKING',\n  BOOKING_FAILED: 'BOOKING_FAILED',\n  VACCINATED: 'VACCINATED',\n  REGISTERED: 'REGISTERED',\n  NOT_REGISTERED: 'NOT_REGISTERED',\n  ALTERNATE_PHONE_INIT: 'ALTERNATE_PHONE_INIT'\n};\n\nexport const API_URLS = {\n  [PROCESS_STAGE.INIT]: 'https://cdn-api.co-vin.in/api/v2/auth/generateMobileOTP',\n  [PROCESS_STAGE.VALIDATE_OTP]: 'https://cdn-api.co-vin.in/api/v2/auth/validateMobileOtp',\n  [PROCESS_STAGE.FETCH_BENEFICIARY]: 'https://cdn-api.co-vin.in/api/v2/appointment/beneficiaries',\n  [PROCESS_STAGE.TRIGGER_CAPTCHA]: 'https://cdn-api.co-vin.in/api/v2/auth/getRecaptcha',\n  [PROCESS_STAGE.SCHEDULE]: 'https://cdn-api.co-vin.in/api/v2/appointment/schedule',\n  [PROCESS_STAGE.FETCH_SLOTS]: 'https://cdn-api.co-vin.in/api/v2/appointment/sessions/calendarByDistrict'\n};\n\nexport const ALLOWED_NAME_EDITS = 3;\n\nexport const SLOT_FILTER = {\n  MIN_AGE: 18,\n  MIN_CAPACITY: 5\n};\n\nexport const ERROR_CODE = {\n  NO_BENEFICIARY: 'NO_BENEFICIARY',\n  NO_SLOT: 'NO_SLOT',\n  INVALID_OTP: 'INVALID_OTP',\n  INVALID_CAPTCHA: 'INVALID_CAPTCHA',\n  EXISTING_BOOKING: 'EXISTING_BOOKING',\n  BOOKING_FAILED: 'BOOKING_FAILED',\n  UNKNOWN_ERROR: 'UNKNOWN_ERROR',\n  INVALID_PHONE: 'INVALID_PHONE'\n};\n\nexport const COWIN_ERROR_CODE = {\n  [ERROR_CODE.EXISTING_BOOKING]: 'APPOIN0022',\n  [ERROR_CODE.INVALID_OTP]: 'USRAUT0014',\n  [ERROR_CODE.INVALID_CAPTCHA]: 'APPOIN0045',\n  [ERROR_CODE.NO_BENEFICIARY]: 'APPOIN0001'\n};\n\nexport const OTP_RETRY_TIME = 120;\n\nexport const MAX_BOOKING_ATTEMPT = 2;\n\nexport const ID_TYPE = {\n  'Aadhaar Card': 'aadhaar_card',\n  'PAN Card': 'pan_card'\n};\n\nexport const SLOT_CUTOFF_HOUR = 15;\n\nexport const INVALID_PHONE_REASONS_TEXT = {\n  SAME_AS_LAST: 'New phone number can\\'t be same as last',\n  DEFAULT: 'Please enter a valid phone number'\n};\n\nexport const DEFAULT_AUTO_CALLBACK_STATE = {\n  callBackDelayInSeconds: 15,\n  isTimerOn: false\n};\n\nexport const MAX_BENEFICIARY_ALLOWED = 5;"],"sourceRoot":""}