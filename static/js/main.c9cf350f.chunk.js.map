{"version":3,"sources":["utils/network.js","booking/beneficiary.js","booking/slot.js","webCallback/index.js","utils/queryParams.js","assests/build4bharat.jpg","App.js","reportWebVitals.js","index.js","stateView/index.js","utils/stringUtils.js","constants.js"],"names":["makePostCall","path","body","stateCallback","token","a","isLoading","Promise","resolve","then","fetch","method","headers","JSON","stringify","response","json","data","error","catch","errorObj","code","errorCode","message","makeGetCall","filterBeneficiary","state","beneficiaryList","paramsName","getFirstName","name","idType","id_type","id_number","maskedIdNumber","slice","idMatchRecord","_","entry","entryIdType","ID_TYPE","photo_id_type","entryIdNumber","firstName","getEditDistance","ALLOWED_NAME_EDITS","fetchBenficiaries","API_URLS","FETCH_BENEFICIARY","beneficiaryDetails","ERROR_CODE","NO_BENEFICIARY","dose1_date","stage","PROCESS_STAGE","VACCINATED","appointments","EXISTING_BOOKING","FETCH_SLOTS","getAvailableVaccineSlot","centerList","availableSlot","undefined","center","sessions","availableSession","session","centerAvailability","dose1Availability","SLOT_FILTER","MIN_CAPACITY","min_age_limit","MIN_AGE","targetSlot","slotDate","date","getCurrentDateString","slots","getTargetSlotTime","slot_time","fetchSlots","district","REGISTERED","dateString","getSlotDateString","vaccineSlot","NO_SLOT","TRIGGER_CAPTCHA","triggerCallback","obj","callbackParams","getCallbackParams","requestBody","auth_key","phone","app_state","queryString","qs","window","setTimeout","location","href","callback","getErrorParams","baseState","beneficiary_id","beneficiary_reference_id","vaccine","vaccination_status","dose_1_date","dose_2_date","dose2_date","err_code","err_message","lastAppointment","center_id","center_name","slot","session_id","dose","appointment_id","SLOT_BOOKED","appointmentId","center_address","address","center_district_name","district_name","center_pincode","pincode","shajs","require","useStyles","makeStyles","root","backgroundColor","width","image","overflowY","card","flexGrow","minHeight","margin","padding","position","bottom","button","marginTop","getRandomSecretKey","index","parseInt","Math","random","SECRET_KEYS","withRouter","props","searchParams","search","ignoreQueryPrefix","useState","INIT","otp","captcha","setState","OTP_RETRY_TIME","retryTime","setRetryTime","bookingAttempt","setBookingAttempt","updatedState","changeOtp","changeCaptcha","triggerOtp","secretKey","txnId","VALIDATE_OTP","submitOtp","otpHash","update","digest","submitCaptcha","SCHEDULE","triggerCaptcha","svg","handleBookingFailure","BOOKING_FAILED","MAX_BOOKING_ATTEMPT","intervalId","console","log","clearInterval","useEffect","ERROR","COWIN_ERROR_CODE","INVALID_OTP","INVALID_CAPTCHA","classes","renderView","renderCaptchStage","renderSuccessStage","renderVaccinatedStage","renderExistingBookingStage","renderBookingFailedStage","renderErrorStage","renderRegisteredStage","renderOtpStage","getRenderView","errorItem","Grid","alignItems","justify","item","lg","Typography","color","Box","fontWeight","className","src","Image","Card","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","component","App","document","getElementById","getRedirectElement","retryEnabled","retryTimeString","getMinuteString","variant","maxLength","type","id","label","value","onChange","e","target","container","onClick","disabled","base64data","Buffer","toString","getBookingActionElement","getRetryElement","bookingActionElement","errorMessage","errCode","getErrorMessage","lowerName","word","firstString","secondString","lengthFirstString","lengthSecondString","costs","indexFirst","indexSecond","min","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","getHours","SLOT_CUTOFF_HOUR","seconds","toISOString","substr","UNKNOWN_ERROR"],"mappings":"mRAAaA,EAAY,uCAAG,WAAOC,EAAMC,EAAMC,EAAeC,GAAlC,SAAAC,EAAA,6DAC1BF,EAAc,CAAEG,WAAW,IADD,kBAEnBC,QAAQC,UACdC,MAAK,WACJ,OAAOC,MAAMT,EAAM,CACjBU,OAAQ,OACRC,QAAS,CAAE,eAAgB,mBAC3B,cAAgB,UAAhB,OAA2BR,IAC3BF,KAAMW,KAAKC,UAAUZ,QAGxBO,MAAK,SAACM,GACL,OAAOA,EAASC,UAEjBP,MAAK,SAACQ,GAEL,GADAd,EAAc,CAAEG,WAAW,IACvBW,EAAKC,MACP,MAAMD,EAER,OAAOA,KAERE,OAAM,SAAAF,GAEL,MADAd,EAAc,CAAEiB,SAAU,CAACC,KAAMJ,EAAKK,UAAWC,QAASN,EAAKC,OAASZ,WAAW,IAC7EW,MAvBkB,2CAAH,4DA2BZO,EAAW,uCAAG,WAAOvB,EAAME,EAAeC,GAA5B,SAAAC,EAAA,6DACzBF,EAAc,CAAEG,WAAW,IADF,kBAElBC,QAAQC,UACdC,MAAK,WACJ,OAAOC,MAAMT,EAAM,CACjBU,OAAQ,MACRC,QAAS,CAAE,eAAgB,mBAC3B,cAAgB,UAAhB,OAA2BR,SAG9BK,MAAK,SAACM,GACL,OAAOA,EAASC,UAEjBP,MAAK,SAACQ,GAEL,GADAd,EAAc,CAAEG,WAAW,IACvBW,EAAKC,MACP,MAAMD,EAER,OAAOA,KAERE,OAAM,SAAAF,GAEL,MADAd,EAAc,CAAEiB,SAAU,CAACC,KAAMJ,EAAKK,UAAWC,QAASN,EAAKC,OAASZ,WAAW,IAC7EW,MAtBiB,2CAAH,0D,QCtBlBQ,EAAoB,SAACC,EAAOC,GAChC,IAAMC,EAAaC,YAAaH,EAAMI,MACrBC,EAAmCL,EAA5CM,QAAR,EAAoDN,EAA3BO,UACnBC,QADN,MAA6C,GAA7C,GACgCC,OAAO,GAEjCC,EAAgBC,OAAOV,GAAiB,SAACW,GAC7C,IAAMC,EAAcC,IAAQF,EAAMG,eAC5BC,EAAgBL,MAAMC,EAAO,kBAAmB,IAAIH,OAAO,GAEjE,OAAOJ,IAAWQ,GAAeL,IAAmBQ,KAEtD,OAAKL,UAAUD,GAIRC,OAAOV,GAAiB,SAACW,GAC9B,IAAQR,EAASQ,EAATR,KACFa,EAAYd,YAAaC,GAE/B,OADqBc,YAAgBhB,EAAYe,GAC3BE,OAPfT,GAWEU,EAAiB,uCAAG,WAAOpB,EAAOvB,GAAd,mBAAAE,EAAA,+EAEVmB,EAAYuB,IAASC,kBAAmB7C,EAAeuB,EAAMtB,OAFnD,UAEvBa,EAFuB,OAGvBU,EAAkBU,MAAMpB,EAAM,gBAAiB,IAC/CgC,EAAqBxB,EAAkBC,EAAOC,IAChDU,UAAUY,GALe,uBAM3B9C,EAAc,CAACiB,SAAU,CAAEC,KAAM6B,IAAWC,eAAgB5B,QAAS,oCAN1C,6BAUxBc,UAAUY,EAAmBG,YAVL,wBAW3BjD,EAAc,CAACkD,MAAOC,IAAcC,WAAYN,uBAXrB,8BAcxBZ,UAAUY,EAAmBO,cAdL,wBAe3BrD,EAAc,CAACkD,MAAOC,IAAcG,iBAAkBR,uBAf3B,2BAkB7B9C,EAAc,CAACkD,MAAOC,IAAcI,YAAaT,uBAlBpB,4GAAH,wDCbxBU,EAA0B,SAACC,GAC/B,IAAIC,OAAgBC,EAoBpB,OAnBAzB,UAAUuB,GAAY,SAACG,GACrB,IAAQC,EAAaD,EAAbC,SACFC,EAAmB5B,OAAO2B,GAAU,SAACE,GAEzC,IAAMC,EAAqB9B,MAAM6B,EAAS,qBAAsB,GAC1DE,EAAoB/B,MAAM6B,EAAS,2BAA4B,GACrE,OAAOC,EAAqB,GAAKC,GAAqBC,IAAYC,cAChEJ,EAAQK,gBAAkBF,IAAYG,WAE1C,GAAIP,EAAkB,CACpB,IAAMQ,EAtBc,SAACR,GACzB,IAAMS,EAAWT,EAAiBU,KAGlC,OAF0BC,gBAEAF,EACjBT,EAAiBY,MAAM,GAEzBxC,OAAO4B,EAAiBY,OAeRC,CAAkBb,GAMrC,OALAJ,EAAa,uCACRE,GACAE,GAFQ,IAGXc,UAAWN,KAEN,MAGJZ,GAGImB,EAAU,uCAAG,WAAMtD,EAAOvB,GAAb,uBAAAE,EAAA,yDAChB4E,EAAavD,EAAbuD,SADgB,uBAGtB9E,EAAc,CAAEkD,MAAOC,IAAc4B,aAHf,iCAMlBC,EAAaC,cANK,kBAQH5D,EAAY,GAAD,OAAIuB,IAASW,YAAb,wBAAwCuB,EAAxC,iBAAyDE,GACtFhF,EAAeuB,EAAMtB,OATA,UAQhBa,EARgB,OAUhB2C,EAAavB,MAAMpB,EAAM,UAAW,IACpCoE,EAAc1B,EAAwBC,IACxCvB,UAAUgD,GAZQ,wBAapBlF,EAAc,CAACiB,SAAU,CAAEC,KAAM6B,IAAWoC,QAAS/D,QAAQ,wCAAD,OAA0C0D,MAblF,2BAgBtB9E,EAAc,CAAEkD,MAAOC,IAAciC,gBAAiBF,gBAhBhC,4GAAH,wD,QCnChB,IAAMG,EAAkB,SAAC9D,GAC9B,ICEkC+D,EDF5BC,EAAiBC,EAAkBjE,GACnCkE,EAAW,2BACZF,GADY,IAEfG,SAAUnE,EAAMmE,SAChBC,MAAOpE,EAAMoE,MACbC,UAAWrE,EAAM2B,QAEb2C,GCL4BP,EDKMG,ECJtBK,YAAaR,IDK/BS,OAAOC,YAAW,WAChBD,OAAOE,SAASC,KAAhB,UAA0B3E,EAAM4E,SAAhC,YAA4CN,KAC3C,MAGCL,EAAoB,SAACjE,GACzB,MAAkCA,EAA1BuB,0BAAR,MAA2B,GAA3B,EACM7B,EAAWmF,EAAe7E,GAC1B8E,EAAY,CAChBC,eAAgBxD,EAAmByD,yBACnC5E,KAAMmB,EAAmBnB,KACzB6E,QAAS1D,EAAmB0D,QAC5BC,mBAAoB3D,EAAmB2D,mBACvCC,YAAa5D,EAAmBG,WAChC0D,YAAa7D,EAAmB8D,WAChCC,SAAU5F,EAASC,KACnB4F,YAAa7F,EAASG,SAGxB,OAAOG,EAAM2B,OACX,KAAKC,IAAcG,iBACjB,MAA4BR,EAApBO,oBAAR,MAAqB,GAArB,EACM0D,EAAkB7E,OAAOmB,IAAiB,GAChD,OAAO,2BACFgD,GADL,IAEEW,UAAWD,EAAgBC,UAC3BC,YAAaF,EAAgBpF,KAC7BuF,KAAMH,EAAgBG,KACtBC,WAAYJ,EAAgBI,WAC5B3C,KAAMuC,EAAgBvC,KACtB4C,KAAML,EAAgBK,KACtBC,eAAgBN,EAAgBM,iBAEpC,KAAKlE,IAAcmE,YACjB,MAA0C/F,EAAlC2D,mBAAR,MAAoB,GAApB,EAAwBqC,EAAkBhG,EAAlBgG,cACxB,OAAO,2BACFlB,GADL,IAEEgB,eAAgBE,EAChBP,UAAW9B,EAAY8B,UACvBC,YAAa/B,EAAYvD,KACzB6F,eAAgBtC,EAAYuC,QAC5BC,qBAAsBxC,EAAYyC,cAClCC,eAAgB1C,EAAY2C,QAC5BX,KAAMhC,EAAYN,UAClBuC,WAAYjC,EAAYiC,WACxB3C,KAAMU,EAAYV,OAEtB,QACE,OAAO6B,IAIPD,EAAiB,SAAC7E,GACtB,OAAIA,EAAM2B,QAAUC,IAAcmE,YACzB,GAEF/F,EAAMN,UAAY,IErEZ,MAA0B,yC,uBCmBnC6G,EAAQC,EAAQ,KAEhBC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,gBAAiB,UACjBC,MAAO,QAETC,MAAO,CACLC,UAAW,SACXF,MAAO,QAETG,KAAM,CACJC,SAAU,EACVJ,MAAO,MACPK,UAAW,MACXC,OAAQ,OACRC,QAAS,KACTC,SAAU,WACVC,OAAQ,GAEVC,OAAQ,CACNC,UAAW,IAEbhJ,KAAM,CACJgJ,UAAW,QAIf,SAASC,IACP,IAAMC,EAAQC,SAAwB,GAAdC,KAAKC,UAAc,EAC3C,OAAOC,IAAYJ,GAuMNK,mBApMf,SAAaC,GACX,IFnDqC1D,EEmD/B2D,GFnD+B3D,EEmDO0D,EAAMtD,SAASwD,OFlDtC3D,QAASD,EAAa,CAAE6D,mBAAmB,KACzC,IEkDvB,EAA0BC,mBAAS,2BAAIH,GAAL,IAChCtG,MAAOC,IAAcyG,KAAMC,IAAK,GAAIC,QAAS,MAD/C,mBAAOvI,EAAP,KAAcwI,EAAd,KAEA,EAAkCJ,mBAASK,KAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA4CP,mBAAS,GAArD,mBAAOQ,EAAP,KAAuBC,EAAvB,KAEMpK,EAAgB,SAACqK,GACrBN,EAAS,2BAAIxI,GAAU8I,KAEnBC,EAAY,SAACT,GACjBE,EAAS,2BAAIxI,GAAL,IAAYsI,UAEhBU,EAAgB,SAACT,GACrBC,EAAS,2BAAIxI,GAAL,IAAYuI,cAEhBU,EAAU,uCAAG,8BAAAtK,EAAA,6DACXuK,EAAYzB,IAClBkB,EAAaF,KAFI,kBAIInK,EAAa+C,IAASgH,KAAM,CAC7C,OAAUrI,EAAMoE,MAChB,OAAU8E,GACTzK,GAPY,OAITc,EAJS,OAQfiJ,EAAS,2BAAIxI,GAAL,IAAYmJ,MAAO5J,EAAK4J,MAAOxH,MAAOC,IAAcwH,gBAR7C,yGAAH,qDAaVC,EAAS,uCAAG,8BAAA1K,EAAA,6DACV2K,EAAU/C,EAAM,UAAUgD,OAAOvJ,EAAMsI,KAAKkB,OAAO,OADzC,kBAGKlL,EAAa+C,IAAS+H,aAAc,CACrD,IAAOE,EACP,MAAStJ,EAAMmJ,OACd1K,GANW,OAGRc,EAHQ,OAOdiJ,EAAS,2BAAIxI,GAAL,IAAYtB,MAAOa,EAAKb,MAAOgB,SAAU,GAAIiC,MAAOC,IAAcN,qBAP5D,yGAAH,qDAWTmI,EAAa,uCAAG,8BAAA9K,EAAA,+EAECL,EAAa+C,IAASqI,SAAU,CACjD,QAAW1J,EAAMuI,QACjB,cAAiB,CAACvI,EAAMuB,mBAAmByD,0BAC3C,UAAahF,EAAM2D,YAAY8B,UAC/B,KAAQzF,EAAM2D,YAAYN,UAC1B,WAAcrD,EAAM2D,YAAYiC,WAChC,KAAQjF,UAAUX,EAAMuB,mBAAmBG,YAAY,EAAE,GACxDjD,EAAeuB,EAAMtB,OATN,OAEZa,EAFY,OAUZyG,EAAgBrF,MAAMpB,EAAM,+BAClCiJ,EAAS,2BAAIxI,GAAL,IAAYN,SAAS,GAAIiC,MAAOC,IAAcmE,YAAaC,mBAXjD,yGAAH,qDAeb2D,EAAc,uCAAG,8BAAAhL,EAAA,+EAEAL,EAAa+C,IAASwC,gBAAiB,GAC1DpF,EAAeuB,EAAMtB,OAHF,OAEba,EAFa,OAIbqK,EAAMjJ,MAAMpB,EAAM,WACxBiJ,EAAS,2BAAIxI,GAAL,IAAY2B,MAAOC,IAAc8H,SAAUE,SALhC,yGAAH,qDAgDdC,EAAuB,WAE3B,GADArB,EAAS,2BAAIxI,GAAL,IAAYN,SAAU,GAAIiC,MAAOC,IAAckI,kBACnDlB,EAAiBmB,IAAqB,CACxC,IAAMC,EAAavF,YAAW,WAC5BwF,QAAQC,IAAI,gBACZrB,EAAkBD,EAAe,KAChC,KACH,OAAO,kBAAMuB,cAAcH,IAE3BlG,EAAgB,2BAAI9D,GAAL,IAAY2B,MAAOC,IAAckI,mBAGpDM,qBAAU,WACJpK,EAAMoE,OAASpE,EAAM2B,QAAUC,IAAcyG,MAC/CY,MAED,IACHmB,qBAAU,WACR,OAAOpK,EAAM2B,OACX,KAAKC,IAAciC,gBACjB8F,IACA,MACF,KAAK/H,IAAcN,kBACjBF,EAAkBpB,EAAOvB,GACzB,MACF,KAAKmD,IAAcI,YACjBsB,EAAWtD,EAAOvB,GAClB,MACF,KAAKmD,IAAcmE,YACnB,KAAKnE,IAAcC,WACnB,KAAKD,IAAcG,iBACnB,KAAKH,IAAc4B,WACnB,KAAK5B,IAAcyI,MACjBvG,EAAgB9D,MAKnB,CAACA,EAAM2B,QACVyI,qBAAU,WAER,GADazJ,MAAMX,EAAMN,SAAU,QAInC,OAAOM,EAAMN,SAASC,MACpB,KAAK2K,IAAiB9I,IAAW+I,aAC/B,OACF,KAAKD,IAAiB9I,IAAWgJ,iBAE/B,YADAb,IAEF,KAAKW,IAAiB9I,IAAWO,kBAE/B,YADAyG,EAAS,2BAAIxI,GAAL,IAAY2B,MAAOC,IAAcG,oBAE3C,KAAKP,IAAWoC,QAEd,YADAiG,IAEF,QAMC,YALK7J,EAAM2B,QAAUC,IAAc8H,SAChCG,IAEArB,EAAS,2BAAIxI,GAAL,IAAY2B,MAAOC,IAAcyI,aAI9C,CAACrK,EAAMN,WACV0K,qBAAU,WACR,GAAK1B,EAAL,CACA,IAAMsB,EAAavF,YAAW,WAC5BkE,EAAaD,EAAU,KACtB,KACH,OAAO,kBAAMyB,cAAcH,OAC1B,CAACtB,IACJ0B,qBAAU,WACJpK,EAAM2B,QAAUC,IAAckI,gBAChCtB,EAAS,2BAAIxI,GAAL,IAAY2D,YAAa,GAAIjE,SAAU,GAAI6I,QAAQ,GAAI5G,MAAOC,IAAcI,iBAErF,CAAC4G,IAEJ,IAAM6B,EAAUhE,IACViE,EArGgB,SAACD,GACnB,OAAOzK,EAAM2B,OACb,KAAKC,IAAcI,YAEnB,KAAKJ,IAAc8H,SACjB,OAAOiB,YAAkB3K,EAAOyK,EAASzB,EAAeS,GAC1D,KAAK7H,IAAcmE,YACjB,OAAO6E,YAAmBH,GAC5B,KAAK7I,IAAcC,WACjB,OAAOgJ,YAAsBJ,GAC/B,KAAK7I,IAAcG,iBACjB,OAAO+I,YAA2BL,GACpC,KAAK7I,IAAckI,eACjB,OAAOiB,YAAyB/K,EAAO4I,EAAgB6B,GACzD,KAAK7I,IAAcyI,MACjB,OAAOW,YAAiBhL,EAAOyK,GACjC,KAAK7I,IAAc4B,WACjB,OAAOyH,YAAsBR,GAC/B,QACE,OAAOS,YAAe,CAAClL,QAAO0I,YAAW+B,UAAS1B,YAAWM,YAAWJ,gBAkF3DkC,CAAcV,GAC3BW,EArHAzK,UAAUA,MAAMX,EAAMN,SAAU,YAC3B,KAGP,cAAC2L,EAAA,EAAD,CAAMC,WAAW,SAASC,QAAQ,SAAlC,SACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACA,cAACC,EAAA,EAAD,CAAYC,MAAM,QAAlB,SACE,cAACC,EAAA,EAAD,CAAKC,WAAW,iBAAhB,SACG7L,EAAMN,SAASG,gBA8G1B,OACE,sBAAKiM,UAAWrB,EAAQ9D,KAAxB,UACE,qBAAKoF,IAAG,UAAKC,GAASF,UAAWrB,EAAQ3D,QACzC,eAACmF,EAAA,EAAD,CAAMH,UAAWrB,EAAQzD,KAAzB,UACGoE,EACApL,EAAMpB,WAAa,cAACsN,EAAA,EAAD,IACnBxB,WCtOMyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBtN,MAAK,YAAkD,IAA/CuN,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,QCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOtO,KAAK,IAAIuO,UAAWC,QAG/BC,SAASC,eAAe,SAM1Bd,K,qZCRMe,EAAqB,SAACzC,GAC1B,OAAQ,qBAAKqB,UAAWrB,EAAQjM,KAAxB,SACN,cAAC,IAAD,2CAcS0M,EAAiB,SAAC,GAAmE,IAAlElL,EAAiE,EAAjEA,MAAO0I,EAA0D,EAA1DA,UAAW+B,EAA+C,EAA/CA,QAAS1B,EAAsC,EAAtCA,UAAWM,EAA2B,EAA3BA,UAAWJ,EAAgB,EAAhBA,WACzEkE,EAAgBzE,EAAY,EAC5B0E,EAAkBC,YAAgB3E,GACxC,OACE,eAAC,IAAD,CAAM4C,WAAW,SAASC,QAAQ,SAAlC,UACE,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CAAY6B,QAAQ,QAApB,SACE,cAAC,IAAD,CAAKzB,WAAW,iBAAhB,uBAKJ,cAAC,IAAD,CAAML,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CAAY6B,QAAQ,KAApB,SACA,cAAC,IAAD,CAAKzB,WAAW,iBAAhB,2BAKF,cAAC,IAAD,CAAML,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CAAW8B,UAAW,EAAGC,KAAK,SAASC,GAAG,MAAMC,MAAM,cAAcJ,QAAQ,WAAWK,MAAO3N,EAAMsI,IAAKsF,SAAU,SAAAC,GAAC,OAAI9E,EAAU8E,EAAEC,OAAOH,YAE7I,eAAC,IAAD,CAAMI,WAAS,EAACxC,QAAQ,gBAAxB,UACE,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACA,cAAC,IAAD,CAAQK,UAAWrB,EAAQlD,OAAQkG,GAAG,MAAMH,QAAQ,YAAY3B,MAAM,UAAUqC,QAAS3E,EACvF4E,SAAUjO,EAAMpB,UADlB,0BAKA,cAAC,IAAD,CAAM4M,MAAI,EAACC,GAAI,EAAf,SACA,cAAC,IAAD,CAAQK,UAAWrB,EAAQlD,OAAQkG,GAAG,MAAMH,QAAQ,YAClD3B,MAAOwB,EAAa,UAAU,UAC9Ba,QAAS/E,EACTgF,UAAWd,GAAgBnN,EAAMpB,UAHnC,yBAIYuO,EAAa,GAAG,IAAIC,EAAgB,gBAQ3CzC,EAAoB,SAAC3K,EAAOyK,EAASzB,EAAeS,GAAmB,IAAD,EACjF,GAAKzJ,EAAM4J,IAAX,CAGA,IACMsE,EADO,IAAIC,EAAOnO,EAAM4J,KACNwE,SAAS,UACjC,OACE,eAAC,IAAD,CAAM9C,WAAW,SAASC,QAAQ,SAAlC,UACE,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CAAY6B,QAAQ,QAApB,SACE,cAAC,IAAD,CAAKzB,WAAW,iBAAhB,2BAKJ,cAAC,IAAD,CAAML,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CAAY6B,QAAQ,KAApB,SACA,cAAC,IAAD,CAAKzB,WAAW,iBAAhB,2DAKJ,cAAC,IAAD,CAAML,MAAI,EAACC,GAAI,GAAf,SACE,qBAAKM,IAAG,oCAA+BmC,OAEzC,cAAC,IAAD,CAAM1C,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,KAAD,GAAW8B,UAAW,EAAGE,GAAG,UAAUH,QAAQ,WAAWE,KAAK,QAA9D,0BAAgF,GAAhF,qBAAwF,iBAAxF,sBAA+GxN,EAAMuI,SAArH,0BAAwI,SAAAsF,GAAC,OAAI7E,EAAc6E,EAAEC,OAAOH,UAApK,MAEF,cAAC,IAAD,CAAMnC,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CAAQK,UAAWrB,EAAQlD,OAAQkG,GAAG,UAAUO,QAASvE,EAAe6D,QAAQ,YAAY3B,MAAM,UAChGsC,SAAUjO,EAAMpB,UADlB,qCASOgM,EAAqB,SAACH,GACjC,OACE,eAAC,IAAD,CAAMa,WAAW,SAASC,QAAQ,SAAlC,UACE,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CAAY6B,QAAQ,QAApB,SACE,cAAC,IAAD,CAAKzB,WAAW,iBAAiBF,MAAM,eAAvC,6BAKJ,cAAC,IAAD,CAAMH,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CAAY6B,QAAQ,KAApB,SACA,cAAC,IAAD,CAAKzB,WAAW,iBAAhB,sDAKF,cAAC,IAAD,CAAML,MAAI,EAACC,GAAI,GAAf,SACGyB,EAAmBzC,SAMfI,EAAwB,SAACJ,GACpC,OACE,eAAC,IAAD,CAAMa,WAAW,SAASC,QAAQ,SAAlC,UACE,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CAAY6B,QAAQ,QAApB,SACE,cAAC,IAAD,CAAKzB,WAAW,iBAAiBF,MAAM,eAAvC,4BAKJ,cAAC,IAAD,CAAMH,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CAAY6B,QAAQ,KAApB,SACA,cAAC,IAAD,CAAKzB,WAAW,iBAAhB,0CAKF,cAAC,IAAD,CAAML,MAAI,EAACC,GAAI,GAAf,SACGyB,EAAmBzC,SAMfK,EAA6B,SAACL,GACzC,OACE,eAAC,IAAD,CAAMa,WAAW,SAASC,QAAQ,SAAlC,UACE,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CAAY6B,QAAQ,QAApB,SACE,cAAC,IAAD,CAAKzB,WAAW,iBAAiBF,MAAM,eAAvC,6BAKJ,cAAC,IAAD,CAAMH,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CAAY6B,QAAQ,KAApB,SACA,cAAC,IAAD,CAAKzB,WAAW,iBAAhB,yCAKF,cAAC,IAAD,CAAML,MAAI,EAACC,GAAI,GAAf,SACGyB,EAAmBzC,SAMtB4D,EAA0B,SAACzF,EAAgB6B,GAC/C,OAAI7B,EAAiBmB,IAjKC,SAACU,GACvB,OAAQ,qBAAKqB,UAAWrB,EAAQjM,KAAxB,SACN,cAAC,IAAD,mDAgKO8P,CAAgB7D,GAElByC,EAAmBzC,IAGfM,EAA2B,SAAC/K,EAAO4I,EAAgB6B,GAC9D,IAAM8D,EAAuBF,EAAwBzF,EAAgB6B,GAErE,OACE,eAAC,IAAD,CAAMa,WAAW,SAASC,QAAQ,SAAlC,UACE,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CAAY6B,QAAQ,QAApB,SACE,cAAC,IAAD,CAAKzB,WAAW,iBAAiBF,MAAM,iBAAvC,gCAKJ,cAAC,IAAD,CAAMH,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CAAY6B,QAAQ,KAApB,SACA,cAAC,IAAD,CAAKzB,WAAW,iBAAhB,sDAKF,cAAC,IAAD,CAAML,MAAI,EAACC,GAAI,GAAf,SACG8C,QAuBIvD,EAAmB,SAAChL,EAAOyK,GACtC,IAAM+D,EAlBgB,SAACxO,GACvB,IAAMyO,EAAU9N,MAAMX,EAAMN,SAAU,QACtC,OAAI+O,IAAYjN,IAAWC,gBAAkBgN,IAAYnE,IAAiB7I,eAChE,cAAC,IAAD,CAAY6L,QAAQ,KAApB,SACR,cAAC,IAAD,CAAKzB,WAAW,iBAAhB,+GAMM,cAAC,IAAD,CAAYyB,QAAQ,QAApB,SACN,cAAC,IAAD,CAAKzB,WAAW,iBAAiBF,MAAM,iBAAvC,oCAOmB+C,CAAgB1O,GACrC,OACE,eAAC,IAAD,CAAMsL,WAAW,SAASC,QAAQ,SAAlC,UACE,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACG+C,IAEH,cAAC,IAAD,CAAMhD,MAAI,EAACC,GAAI,GAAf,SACGyB,EAAmBzC,SAMfQ,EAAwB,SAACR,GACpC,OACE,eAAC,IAAD,CAAMa,WAAW,SAASC,QAAQ,SAAlC,UACE,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CAAY6B,QAAQ,QAApB,SACE,cAAC,IAAD,CAAKzB,WAAW,iBAAiBF,MAAM,eAAvC,kCAKJ,cAAC,IAAD,CAAMH,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CAAY6B,QAAQ,KAApB,SACA,cAAC,IAAD,CAAKzB,WAAW,iBAAhB,+FAKF,cAAC,IAAD,CAAML,MAAI,EAACC,GAAI,GAAf,SACGyB,EAAmBzC,W,yDCrQ5B,4LAIatK,EAAe,SAACC,GAC3B,IAAMuO,EAAYhO,UAAUP,GAC5B,OAAOO,OAAOA,QAAQgO,EAAW,OAAO,SAACC,GACvC,OAAOjO,OAAOiO,GAAQ,MAKb1N,EAAkB,SAAC2N,EAAaC,GAC3C,IAAMC,EAAoBpO,OAAOkO,GAC3BG,EAAqBrO,OAAOmO,GAClC,GAAIE,EAbmB,IAauBD,EAbvB,GAcrB,OAdqB,GAiBvB,IAAME,EAAQ,GAoBd,OAnBAtO,UAAUA,QAAQ,EAAGoO,EAAkB,IAAI,SAACG,GAC1CD,EAAMC,GAAc,CAACA,MAEvBvO,UAAUA,QAAQ,EAAGqO,EAAmB,IAAI,SAACG,GAC3CF,EAAM,GAAGE,GAAeA,KAG1BxO,UAAUA,QAAQ,EAAGoO,EAAkB,IAAI,SAACG,GAC1CvO,UAAUA,QAAQ,EAAGqO,EAAmB,IAAI,SAACG,GACxCN,EAAYK,EAAa,KAAOJ,EAAaK,EAAc,GAC5DF,EAAMC,GAAYC,GAAeF,EAAMC,EAAW,GAAGC,EAAY,GAEjEF,EAAMC,GAAYC,GAAgBvH,KAAKwH,IAAIH,EAAMC,EAAW,GAAGC,EAAY,GAAK,EAC9EvH,KAAKwH,IAAIH,EAAMC,GAAYC,EAAY,GAAK,EAC1CF,EAAMC,EAAW,GAAGC,GAAe,UAKtCF,EAAMF,GAAmBC,IAGrB9L,EAAuB,WAClC,IAAMmM,EAAQ,IAAIC,KACZC,EAAKF,EAAMG,UACXC,EAAKJ,EAAMK,WAAa,EACxBC,EAAON,EAAMO,cAEnB,MAAM,GAAN,OAAUL,EAAV,aAAiBE,EAAG,EAAI,GAAK,KAAOA,EAApC,YAA0CE,IAG/BjM,EAAoB,WAC/B,IAAM2L,EAAQ,IAAIC,KACdC,EAAKF,EAAMG,UACTC,EAAKJ,EAAMK,WAAa,EACxBC,EAAON,EAAMO,cAKnB,OAJoBP,EAAMQ,WACRC,MAChBP,GAAM,GAEF,GAAN,OAAUA,EAAV,aAAiBE,EAAG,EAAI,GAAK,KAAOA,EAApC,YAA0CE,IAG/BtC,EAAkB,SAAC0C,GAC9B,OAAO,IAAIT,KAAe,IAAVS,GAAgBC,cAAcC,OAAO,GAAI,K,qaC/D9CnI,EAAc,CACzB,2FACA,2FACA,2FACA,2FACA,2FACA,4FAGWlG,EAAgB,CAC3ByG,KAAM,OACNe,aAAc,eACd9H,kBAAmB,oBACnBU,YAAa,cACb6B,gBAAiB,kBACjB6F,SAAU,WACV3D,YAAa,cACbsE,MAAO,QACPtI,iBAAkB,mBAClB+H,eAAgB,iBAChBjI,WAAY,aACZ2B,WAAY,cAGDnC,GAAQ,mBAClBO,EAAcyG,KAAO,2DADH,cAElBzG,EAAcwH,aAAe,2DAFX,cAGlBxH,EAAcN,kBAAoB,8DAHhB,cAIlBM,EAAciC,gBAAkB,sDAJd,cAKlBjC,EAAc8H,SAAW,yDALP,cAMlB9H,EAAcI,YAAc,4EANV,GASRb,EAAqB,EAErBwB,EAAc,CACzBG,QAAS,GACTF,aAAc,GAGHpB,EAAa,CACxBC,eAAgB,iBAChBmC,QAAS,UACT2G,YAAa,cACbC,gBAAiB,kBACjBzI,iBAAkB,mBAClBmO,cAAe,iBAGJ5F,GAAgB,mBAC1B9I,EAAWO,iBAAmB,cADJ,cAE1BP,EAAW+I,YAAc,cAFC,cAG1B/I,EAAWgJ,gBAAkB,cAHH,cAI1BhJ,EAAWC,eAAiB,cAJF,GAOhBgH,EAAiB,IAEjBsB,EAAsB,EAEtBjJ,EAAU,CACrB,eAAgB,eAChB,WAAY,YAGDgP,EAAmB,I","file":"static/js/main.c9cf350f.chunk.js","sourcesContent":["export const makePostCall = async (path, body, stateCallback, token) => {\n  stateCallback({ isLoading: true });\n  return Promise.resolve()\n  .then(() => {\n    return fetch(path, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}` },\n      body: JSON.stringify(body)\n    })\n  })\n  .then((response) => {\n    return response.json();\n  })\n  .then((data) => {\n    stateCallback({ isLoading: false });\n    if (data.error) {\n      throw data;\n    }\n    return data;\n  })\n  .catch(data => {\n    stateCallback({ errorObj: {code: data.errorCode, message: data.error }, isLoading: false });\n    throw data;\n  });\n};\n\nexport const makeGetCall = async (path, stateCallback, token) => {\n  stateCallback({ isLoading: true });\n  return Promise.resolve()\n  .then(() => {\n    return fetch(path, {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}` }\n    })\n  })\n  .then((response) => {\n    return response.json();\n  })\n  .then((data) => {\n    stateCallback({ isLoading: false });\n    if (data.error) {\n      throw data;\n    }\n    return data;\n  })\n  .catch(data => {\n    stateCallback({ errorObj: {code: data.errorCode, message: data.error }, isLoading: false });\n    throw data;\n  });\n};","import * as _ from 'lodash';\nimport { makeGetCall, makePostCall } from '../utils/network';\nimport { getEditDistance, getFirstName, getCurrentDateString } from '../utils/stringUtils';\nimport { PROCESS_STAGE, API_URLS, ALLOWED_NAME_EDITS, ERROR_CODE, ID_TYPE } from '../constants';\n\nconst filterBeneficiary = (state, beneficiaryList) => {\n  const paramsName = getFirstName(state.name);\n  const { id_type: idType, id_number: idNumber='' } = state;\n  const maskedIdNumber = idNumber.slice(-4);\n\n  const idMatchRecord = _.find(beneficiaryList, (entry) => {\n    const entryIdType = ID_TYPE[entry.photo_id_type];\n    const entryIdNumber = _.get(entry, 'photo_id_number', '').slice(-4);\n\n    return idType === entryIdType && maskedIdNumber === entryIdNumber;\n  });\n  if (!_.isEmpty(idMatchRecord)) {\n    return idMatchRecord;\n  }\n\n  return _.find(beneficiaryList, (entry) => {\n    const { name } = entry;\n    const firstName = getFirstName(name);\n    const editDistance = getEditDistance(paramsName, firstName);\n    return editDistance < ALLOWED_NAME_EDITS;\n  });\n};\n\nexport const fetchBenficiaries = async (state, stateCallback) => {\n  try {\n    const data = await makeGetCall(API_URLS.FETCH_BENEFICIARY, stateCallback, state.token);\n    const beneficiaryList = _.get(data, 'beneficiaries', []);\n    const beneficiaryDetails = filterBeneficiary(state, beneficiaryList);\n    if (_.isEmpty(beneficiaryDetails)) {\n      stateCallback({errorObj: { code: ERROR_CODE.NO_BENEFICIARY, message: 'No beneficiary with name match' } });\n      return;\n    }\n    // TODO: Need to be changed later for dose 2 \n    if (!_.isEmpty(beneficiaryDetails.dose1_date)) {\n      stateCallback({stage: PROCESS_STAGE.VACCINATED, beneficiaryDetails });\n      return;\n    }\n    if (!_.isEmpty(beneficiaryDetails.appointments)) {\n      stateCallback({stage: PROCESS_STAGE.EXISTING_BOOKING, beneficiaryDetails });\n      return;\n    }\n    stateCallback({stage: PROCESS_STAGE.FETCH_SLOTS, beneficiaryDetails });\n  } catch(err) {\n\n  }\n};","import * as _ from 'lodash';\nimport { makeGetCall, makePostCall } from '../utils/network';\nimport { getCurrentDateString, getSlotDateString } from '../utils/stringUtils';\nimport { PROCESS_STAGE, API_URLS, SLOT_FILTER, ERROR_CODE } from '../constants';\n\nconst getTargetSlotTime = (availableSession) => {\n  const slotDate = availableSession.date;\n  const currentDateString = getCurrentDateString();\n\n  if (currentDateString !== slotDate) {\n    return availableSession.slots[0];\n  }\n  return _.last(availableSession.slots);\n};\n\nconst getAvailableVaccineSlot = (centerList) => {\n  let availableSlot = undefined;\n  _.forEach(centerList, (center) => {\n    const { sessions } = center;\n    const availableSession = _.find(sessions, (session) => {\n      // TODO: Update to param based dose check later\n      const centerAvailability = _.get(session, 'available_capacity', 0);\n      const dose1Availability = _.get(session, 'available_capacity_dose1', 0);\n      return centerAvailability > 0 && dose1Availability >= SLOT_FILTER.MIN_CAPACITY &&\n        session.min_age_limit === SLOT_FILTER.MIN_AGE;\n    });\n    if (availableSession) {\n      const targetSlot = getTargetSlotTime(availableSession);\n      availableSlot = {\n        ...center,\n        ...availableSession,\n        slot_time: targetSlot\n      };\n      return false;\n    }\n  });\n  return availableSlot;\n};\n\nexport const fetchSlots = async(state, stateCallback) => {\n  const { district } = state;\n  if (!district) {\n    stateCallback({ stage: PROCESS_STAGE.REGISTERED });\n    return;\n  }\n  const dateString = getSlotDateString();\n  try {\n    const data = await makeGetCall(`${API_URLS.FETCH_SLOTS}?district_id=${district}&date=${dateString}`,\n     stateCallback, state.token);\n    const centerList = _.get(data, 'centers', []);\n    const vaccineSlot = getAvailableVaccineSlot(centerList);\n    if (_.isEmpty(vaccineSlot)) {\n      stateCallback({errorObj: { code: ERROR_CODE.NO_SLOT, message: `No available slot found for district ${district}`} })\n      return;\n    }\n    stateCallback({ stage: PROCESS_STAGE.TRIGGER_CAPTCHA, vaccineSlot })\n  } catch(err) {\n\n  }\n};","import { getUrlParamsFromObj } from '../utils/queryParams';\nimport { PROCESS_STAGE } from '../constants';\nimport * as _ from 'lodash';\n\nexport const triggerCallback = (state) => {\n  const callbackParams = getCallbackParams(state);\n  const requestBody = {\n    ...callbackParams,\n    auth_key: state.auth_key,\n    phone: state.phone,\n    app_state: state.stage\n  }\n  const queryString = getUrlParamsFromObj(requestBody);\n  window.setTimeout(function() {\n    window.location.href = `${state.callback}?${queryString}`;\n  }, 3000);\n};\n\nconst getCallbackParams = (state) => {\n  const { beneficiaryDetails={} } = state;\n  const errorObj = getErrorParams(state);\n  const baseState = {\n    beneficiary_id: beneficiaryDetails.beneficiary_reference_id,\n    name: beneficiaryDetails.name,\n    vaccine: beneficiaryDetails.vaccine,\n    vaccination_status: beneficiaryDetails.vaccination_status,\n    dose_1_date: beneficiaryDetails.dose1_date,\n    dose_2_date: beneficiaryDetails.dose2_date,\n    err_code: errorObj.code,\n    err_message: errorObj.message\n  };\n\n  switch(state.stage) {\n    case PROCESS_STAGE.EXISTING_BOOKING:\n      const { appointments=[] } = beneficiaryDetails;\n      const lastAppointment = _.last(appointments) || {};\n      return {\n        ...baseState,\n        center_id: lastAppointment.center_id,\n        center_name: lastAppointment.name,\n        slot: lastAppointment.slot,\n        session_id: lastAppointment.session_id,\n        date: lastAppointment.date,\n        dose: lastAppointment.dose,\n        appointment_id: lastAppointment.appointment_id\n      };\n    case PROCESS_STAGE.SLOT_BOOKED:\n      const { vaccineSlot={}, appointmentId } = state;\n      return {\n        ...baseState,\n        appointment_id: appointmentId,\n        center_id: vaccineSlot.center_id,\n        center_name: vaccineSlot.name,\n        center_address: vaccineSlot.address,\n        center_district_name: vaccineSlot.district_name,\n        center_pincode: vaccineSlot.pincode,\n        slot: vaccineSlot.slot_time,\n        session_id: vaccineSlot.session_id,\n        date: vaccineSlot.date\n      };\n    default:\n      return baseState;\n  }\n};\n\nconst getErrorParams = (state) => {\n  if (state.stage === PROCESS_STAGE.SLOT_BOOKED) {\n    return {};\n  }\n  return state.errorObj || {};\n};","import * as qs from 'qs';\n\nexport function getSearchParamsFromUrl(queryString) {\n  const searchParams = qs.parse(queryString, { ignoreQueryPrefix: true });\n  return searchParams || {};\n}\n\nexport function getUrlParamsFromObj(obj) {\n  const urlParams = qs.stringify(obj);\n  return urlParams;\n}","export default __webpack_public_path__ + \"static/media/build4bharat.06144520.jpg\";","import React, { useState, useEffect } from 'react';\nimport { withRouter } from \"react-router\";\nimport * as _ from 'lodash';\nimport { SECRET_KEYS, PROCESS_STAGE, API_URLS, ERROR_CODE, COWIN_ERROR_CODE,\n  OTP_RETRY_TIME, MAX_BOOKING_ATTEMPT } from './constants';\nimport Card from '@material-ui/core/Card';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makePostCall } from './utils/network';\nimport { fetchBenficiaries } from './booking/beneficiary';\nimport { fetchSlots } from './booking/slot';\nimport { getSearchParamsFromUrl } from './utils/queryParams';\nimport { triggerCallback } from './webCallback';\nimport Image from './assests/build4bharat.jpg';\nimport Box from '@material-ui/core/Box';\nimport { renderOtpStage, renderCaptchStage, renderSuccessStage, renderExistingBookingStage,\nrenderBookingFailedStage, renderVaccinatedStage, renderErrorStage, renderRegisteredStage } from './stateView';\nconst shajs = require('sha.js');\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: '#B2EBFE',\n    width: '100%'\n  },\n  image: {\n    overflowY: 'hidden',\n    width: '100%'\n  },\n  card: {\n    flexGrow: 1,\n    width: '90%',\n    minHeight: '25%',\n    margin: 'auto',\n    padding: '5%',\n    position: 'absolute',\n    bottom: 0\n  },\n  button: {\n    marginTop: 10\n  },\n  body: {\n    marginTop: '5%',\n  }\n});\n\nfunction getRandomSecretKey() {\n  const index = parseInt((Math.random()*10))%6;\n  return SECRET_KEYS[index];\n}\n\nfunction App(props) {\n  const searchParams = getSearchParamsFromUrl(props.location.search);\n  const [state, setState] = useState({...searchParams,\n    stage: PROCESS_STAGE.INIT, otp: '', captcha: '' });\n  const [retryTime, setRetryTime] = useState(OTP_RETRY_TIME);\n  const [bookingAttempt, setBookingAttempt] = useState(1);\n\n  const stateCallback = (updatedState) => {\n    setState({...state, ...updatedState});\n  };\n  const changeOtp = (otp) => {\n    setState({...state, otp});\n  };\n  const changeCaptcha = (captcha) => {\n    setState({...state, captcha});\n  };\n  const triggerOtp = async () => {\n    const secretKey = getRandomSecretKey();\n    setRetryTime(OTP_RETRY_TIME);\n    try {\n      const data = await makePostCall(API_URLS.INIT, {\n        \"mobile\": state.phone,\n        \"secret\": secretKey\n      }, stateCallback);\n      setState({...state, txnId: data.txnId, stage: PROCESS_STAGE.VALIDATE_OTP});\n    } catch(err) {\n      \n    }\n  };\n  const submitOtp = async () => {\n    const otpHash = shajs('sha256').update(state.otp).digest('hex');\n    try {\n      const data = await makePostCall(API_URLS.VALIDATE_OTP, {\n        \"otp\": otpHash,\n        \"txnId\": state.txnId\n      }, stateCallback);\n      setState({...state, token: data.token, errorObj: {}, stage: PROCESS_STAGE.FETCH_BENEFICIARY });\n    } catch(err) {\n    }\n  };\n  const submitCaptcha = async () => {\n    try {\n      const data = await makePostCall(API_URLS.SCHEDULE, {\n        \"captcha\": state.captcha,\n        \"beneficiaries\": [state.beneficiaryDetails.beneficiary_reference_id],\n        \"center_id\": state.vaccineSlot.center_id,\n        \"slot\": state.vaccineSlot.slot_time,\n        \"session_id\": state.vaccineSlot.session_id,\n        \"dose\": _.isEmpty(state.beneficiaryDetails.dose1_date)?1:2\n      }, stateCallback, state.token);\n      const appointmentId = _.get(data, 'appointment_confirmation_no');\n      setState({...state, errorObj:{}, stage: PROCESS_STAGE.SLOT_BOOKED, appointmentId })\n    } catch(err) {\n    }\n  };\n  const triggerCaptcha = async () => {\n    try {\n      const data = await makePostCall(API_URLS.TRIGGER_CAPTCHA, {},\n      stateCallback, state.token);\n      const svg = _.get(data, 'captcha');\n      setState({...state, stage: PROCESS_STAGE.SCHEDULE, svg })\n    } catch(err) {\n\n    }\n  };\n  const renderErrorItem = () => {\n    if (_.isEmpty(_.get(state.errorObj, 'message'))) {\n      return null;\n    }\n    return (\n      <Grid alignItems=\"center\" justify=\"center\">\n        <Grid item lg={12}>\n        <Typography color=\"error\">\n          <Box fontWeight=\"fontWeightBold\">\n            {state.errorObj.message}\n          </Box>\n          </Typography>\n        </Grid>\n      </Grid>\n    )\n  };\n  const getRenderView = (classes) => {\n      switch(state.stage) {\n      case PROCESS_STAGE.FETCH_SLOTS:\n        return renderCaptchStage(state, classes, changeCaptcha, submitCaptcha);\n      case PROCESS_STAGE.SCHEDULE:\n        return renderCaptchStage(state, classes, changeCaptcha, submitCaptcha);\n      case PROCESS_STAGE.SLOT_BOOKED:\n        return renderSuccessStage(classes);\n      case PROCESS_STAGE.VACCINATED:\n        return renderVaccinatedStage(classes);  \n      case PROCESS_STAGE.EXISTING_BOOKING:\n        return renderExistingBookingStage(classes);    \n      case PROCESS_STAGE.BOOKING_FAILED:\n        return renderBookingFailedStage(state, bookingAttempt, classes);\n      case PROCESS_STAGE.ERROR:\n        return renderErrorStage(state, classes);\n      case PROCESS_STAGE.REGISTERED:\n        return renderRegisteredStage(classes);\n      default:\n        return renderOtpStage({state, retryTime, classes, changeOtp, submitOtp, triggerOtp});\n    }\n  }\n  const handleBookingFailure = () => {\n    setState({...state, errorObj: {}, stage: PROCESS_STAGE.BOOKING_FAILED});\n    if (bookingAttempt < MAX_BOOKING_ATTEMPT) {\n      const intervalId = setTimeout(() => {\n        console.log('Updating now');\n        setBookingAttempt(bookingAttempt+1);\n      }, 3000);\n      return () => clearInterval(intervalId);\n    } else {\n      triggerCallback({...state, stage: PROCESS_STAGE.BOOKING_FAILED});\n    }\n  };\n  useEffect(() => {\n    if (state.phone && state.stage === PROCESS_STAGE.INIT) {\n      triggerOtp();\n    }\n  }, []);\n  useEffect(() => {\n    switch(state.stage) {\n      case PROCESS_STAGE.TRIGGER_CAPTCHA:\n        triggerCaptcha();\n        break;\n      case PROCESS_STAGE.FETCH_BENEFICIARY:\n        fetchBenficiaries(state, stateCallback);\n        break;\n      case PROCESS_STAGE.FETCH_SLOTS:\n        fetchSlots(state, stateCallback);\n        break;\n      case PROCESS_STAGE.SLOT_BOOKED:\n      case PROCESS_STAGE.VACCINATED:\n      case PROCESS_STAGE.EXISTING_BOOKING:\n      case PROCESS_STAGE.REGISTERED:\n      case PROCESS_STAGE.ERROR:\n        triggerCallback(state);\n        break;\n      default:\n        break;\n    }\n  }, [state.stage]);\n  useEffect(() => {\n    const code = _.get(state.errorObj, 'code');\n    if (!code) {\n      return;\n    }\n    switch(state.errorObj.code) {\n      case COWIN_ERROR_CODE[ERROR_CODE.INVALID_OTP]:\n        return;\n      case COWIN_ERROR_CODE[ERROR_CODE.INVALID_CAPTCHA]:\n        triggerCaptcha();\n        return;  \n      case COWIN_ERROR_CODE[ERROR_CODE.EXISTING_BOOKING]:\n        setState({...state, stage: PROCESS_STAGE.EXISTING_BOOKING });\n        return;\n      case ERROR_CODE.NO_SLOT:\n        handleBookingFailure();\n        return;\n      default:\n        if (state.stage === PROCESS_STAGE.SCHEDULE) {\n          handleBookingFailure();\n        } else {\n          setState({...state, stage: PROCESS_STAGE.ERROR });\n        }\n       return;\n    };\n  }, [state.errorObj]);\n  useEffect(() => {\n    if (!retryTime) return;\n    const intervalId = setTimeout(() => {\n      setRetryTime(retryTime-1);\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [retryTime])\n  useEffect(() => {\n    if (state.stage === PROCESS_STAGE.BOOKING_FAILED) {\n      setState({...state, vaccineSlot: {}, errorObj: {}, captcha:'', stage: PROCESS_STAGE.FETCH_SLOTS});\n    }\n  }, [bookingAttempt])\n\n  const classes = useStyles();\n  const renderView = getRenderView(classes);\n  const errorItem = renderErrorItem(); \n  return (\n    <div className={classes.root}>\n      <img src={`${Image}`} className={classes.image} />\n      <Card className={classes.card}>\n        {errorItem}\n        {state.isLoading && <CircularProgress />}\n        {renderView}\n      </Card>\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Route path=\"/\" component={App} />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from 'react';\nimport * as _ from 'lodash';\nimport { OTP_RETRY_TIME, MAX_BOOKING_ATTEMPT, ERROR_CODE, COWIN_ERROR_CODE } from '../constants';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { getMinuteString } from '../utils/stringUtils';\nimport Box from '@material-ui/core/Box';\n\nconst getRedirectElement = (classes) => {\n  return (<div className={classes.body}>\n    <Typography>\n    ⌛ Taking you back...\n    </Typography>\n  </div>)\n};\n\nconst getRetryElement = (classes) => {\n  return (<div className={classes.body}>\n    <Typography>\n    ⌛ Retrying some other slot...\n    </Typography>\n  </div>)\n};\n\nexport const renderOtpStage = ({state, retryTime, classes, changeOtp, submitOtp, triggerOtp}) => {\n  const retryEnabled = (retryTime < 1);\n  const retryTimeString = getMinuteString(retryTime);\n  return (\n    <Grid alignItems=\"center\" justify=\"center\">\n      <Grid item lg={12}>\n        <Typography variant=\"body2\">\n          <Box fontWeight=\"fontWeightBold\">\n            LOGIN\n          </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        <Typography variant=\"h6\">\n        <Box fontWeight=\"fontWeightBold\">\n          Enter OTP\n        </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        <TextField maxLength={6} type=\"number\" id=\"otp\" label=\"6-digit OTP\" variant=\"outlined\" value={state.otp} onChange={e => changeOtp(e.target.value)} />\n      </Grid>\n      <Grid container justify=\"space-between\">\n        <Grid item lg={6}>\n        <Button className={classes.button} id=\"otp\" variant=\"contained\" color=\"primary\" onClick={submitOtp}\n          disabled={state.isLoading}>\n          Submit OTP\n        </Button>\n        </Grid>\n        <Grid item lg={6}>\n        <Button className={classes.button} id=\"otp\" variant=\"contained\"\n          color={retryEnabled?\"primary\":\"default\"}\n          onClick={triggerOtp}\n          disabled={!retryEnabled || state.isLoading}>\n          {`Retry ${retryEnabled?'':'('+retryTimeString+')'}`}\n        </Button>\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n};\n\nexport const renderCaptchStage = (state, classes, changeCaptcha, submitCaptcha) => {\n  if (!state.svg) {\n    return undefined;\n  }\n  const buff = new Buffer(state.svg);\n  const base64data = buff.toString('base64');\n  return (\n    <Grid alignItems=\"center\" justify=\"center\">\n      <Grid item lg={12}>\n        <Typography variant=\"body2\">\n          <Box fontWeight=\"fontWeightBold\">\n            Book Slot\n          </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        <Typography variant=\"h6\">\n        <Box fontWeight=\"fontWeightBold\">\n          Enter the characters you see in the image\n        </Box>\n      </Typography>\n    </Grid>\n    <Grid item lg={12}>\n      <img src={`data:image/svg+xml;base64,${base64data}`} />\n    </Grid>\n    <Grid item lg={12}>\n      <TextField maxLength={6} id=\"captcha\" variant=\"outlined\" type=\"text\" maxLength={6} name=\"Enter Captcha\" value={state.captcha} onChange={e => changeCaptcha(e.target.value)} />\n    </Grid>\n    <Grid item lg={12}>\n      <Button className={classes.button} id=\"captcha\" onClick={submitCaptcha} variant=\"contained\" color=\"primary\"\n        disabled={state.isLoading}>\n        Book Vaccination\n      </Button>\n    </Grid>\n  </Grid>\n  )\n};\n\nexport const renderSuccessStage = (classes) => {\n  return (\n    <Grid alignItems=\"center\" justify=\"center\">\n      <Grid item lg={12}>\n        <Typography variant=\"body2\">\n          <Box fontWeight=\"fontWeightBold\" color=\"success.main\">\n            SLOT BOOKED\n          </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        <Typography variant=\"h6\">\n        <Box fontWeight=\"fontWeightBold\">\n          Your vaccinated slot has been booked\n        </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        {getRedirectElement(classes)}\n      </Grid>\n    </Grid>\n  )\n};\n\nexport const renderVaccinatedStage = (classes) => {\n  return (\n    <Grid alignItems=\"center\" justify=\"center\">\n      <Grid item lg={12}>\n        <Typography variant=\"body2\">\n          <Box fontWeight=\"fontWeightBold\" color=\"success.main\">\n            VACCINATED\n          </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        <Typography variant=\"h6\">\n        <Box fontWeight=\"fontWeightBold\">\n          You have been vaccinated\n        </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        {getRedirectElement(classes)}\n      </Grid>\n    </Grid>\n  )\n};\n\nexport const renderExistingBookingStage = (classes) => {\n  return (\n    <Grid alignItems=\"center\" justify=\"center\">\n      <Grid item lg={12}>\n        <Typography variant=\"body2\">\n          <Box fontWeight=\"fontWeightBold\" color=\"success.main\">\n            SLOT BOOKED\n          </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        <Typography variant=\"h6\">\n        <Box fontWeight=\"fontWeightBold\">\n          You have a slot booking\n        </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        {getRedirectElement(classes)}\n      </Grid>\n    </Grid>\n  )\n};\n\nconst getBookingActionElement = (bookingAttempt, classes) => {\n  if (bookingAttempt < MAX_BOOKING_ATTEMPT) {\n    return getRetryElement(classes);\n  }\n  return getRedirectElement(classes);\n}\n\nexport const renderBookingFailedStage = (state, bookingAttempt, classes) => {\n  const bookingActionElement = getBookingActionElement(bookingAttempt, classes);\n\n  return (\n    <Grid alignItems=\"center\" justify=\"center\">\n      <Grid item lg={12}>\n        <Typography variant=\"body2\">\n          <Box fontWeight=\"fontWeightBold\" color=\"secondary.main\">\n            BOOKING FAILED\n          </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        <Typography variant=\"h6\">\n        <Box fontWeight=\"fontWeightBold\">\n          All slots booked before your booking\n        </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        {bookingActionElement}\n      </Grid>\n    </Grid>\n  )\n};\n\nconst getErrorMessage = (state) => {\n  const errCode = _.get(state.errorObj, 'code');\n  if (errCode === ERROR_CODE.NO_BENEFICIARY || errCode === COWIN_ERROR_CODE.NO_BENEFICIARY) {\n    return (<Typography variant=\"h6\">\n    <Box fontWeight=\"fontWeightBold\">\n      Your registration on CoWin Portal is pending.\n      Please register first so that you can book slots.\n    </Box>\n    </Typography>);\n  }\n  return (<Typography variant=\"body2\">\n    <Box fontWeight=\"fontWeightBold\" color=\"secondary.main\">\n      SOMETHING WENT WRONG\n    </Box>\n  </Typography>);\n};\n\nexport const renderErrorStage = (state, classes) => {\n  const errorMessage = getErrorMessage(state);\n  return (\n    <Grid alignItems=\"center\" justify=\"center\">\n      <Grid item lg={12}>\n        {errorMessage}\n      </Grid>\n      <Grid item lg={12}>\n        {getRedirectElement(classes)}\n      </Grid>\n    </Grid>\n  )\n};\n\nexport const renderRegisteredStage = (classes) => {\n  return (\n    <Grid alignItems=\"center\" justify=\"center\">\n      <Grid item lg={12}>\n        <Typography variant=\"body2\">\n          <Box fontWeight=\"fontWeightBold\" color=\"success.main\">\n            STATUS CONFIRMED\n          </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        <Typography variant=\"h6\">\n        <Box fontWeight=\"fontWeightBold\">\n          You have registered on CoWin portal. Please book a slot for vaccination soon.\n        </Box>\n        </Typography>\n      </Grid>\n      <Grid item lg={12}>\n        {getRedirectElement(classes)}\n      </Grid>\n    </Grid>\n  )\n};\n","import * as _ from 'lodash';\nimport { SLOT_CUTOFF_HOUR } from '../constants';\nconst MAX_STRING_CHECK = 50;\n\nexport const getFirstName = (name) => {\n  const lowerName = _.toLower(name);\n  return _.find(_.split(lowerName, /\\s/), (word) => {\n    return _.size(word) > 2;\n  });\n};\n\n// Levenshtein distance\nexport const getEditDistance = (firstString, secondString) => {\n  const lengthFirstString = _.size(firstString);\n  const lengthSecondString = _.size(secondString);\n  if (lengthSecondString > MAX_STRING_CHECK ||  lengthFirstString > MAX_STRING_CHECK) {\n    return MAX_STRING_CHECK;\n  }\n\n  const costs = [];\n  _.forEach(_.range(0, lengthFirstString+1), (indexFirst) => {\n    costs[indexFirst] = [indexFirst];\n  });\n  _.forEach(_.range(0, lengthSecondString+1), (indexSecond) => {\n    costs[0][indexSecond] = indexSecond;\n  });\n\n  _.forEach(_.range(1, lengthFirstString+1), (indexFirst) => {\n    _.forEach(_.range(1, lengthSecondString+1), (indexSecond) => {\n     if (firstString[indexFirst - 1] === secondString[indexSecond - 1]){\n        costs[indexFirst][indexSecond] = costs[indexFirst-1][indexSecond-1];\n      } else {\n        costs[indexFirst][indexSecond] =  Math.min(costs[indexFirst-1][indexSecond-1] + 1,\n          Math.min(costs[indexFirst][indexSecond-1] + 1,\n            costs[indexFirst-1][indexSecond] + 1))\n      }\n    })\n  });\n\n  return costs[lengthFirstString][lengthSecondString];\n};\n\nexport const getCurrentDateString = () => {\n  const today = new Date();\n  const dd = today.getDate();\n  const mm = today.getMonth() + 1;\n  const yyyy = today.getFullYear();\n\n  return `${dd}-${(mm>9 ? '' : '0') + mm}-${yyyy}`;\n};\n\nexport const getSlotDateString = () => {\n  const today = new Date();\n  let dd = today.getDate();\n  const mm = today.getMonth() + 1;\n  const yyyy = today.getFullYear();\n  const currentHour = today.getHours();\n  if (currentHour > SLOT_CUTOFF_HOUR) {\n    dd += 1;\n  }\n  return `${dd}-${(mm>9 ? '' : '0') + mm}-${yyyy}`;\n};\n\nexport const getMinuteString = (seconds) => {\n  return new Date(seconds * 1000).toISOString().substr(14, 5);\n};","\nexport const SECRET_KEYS = [\n  'U2FsdGVkX1/fkazU2I2Rdz3hI7iWT6HRzThZj16rpyn4xYM6wcbd84k4CpJimxC0YpG3kFn9qog6LhmaRoS14g==',\n  'U2FsdGVkX19I0TpTI50qTW+0o+LEWSBPYIcivZR4gvANVyLhRhP+rwapNMmyE3tE7e2EeEIV8X6YVfOODlCUbg==',\n  'U2FsdGVkX181DnPRmCbp6NePNHeHRfh3dAO9dMMSApKdvNpIEcK11CYuqjyI04DU4TRuktcSduxWej8OGCz9ZA==',\n  'U2FsdGVkX19NYwIf1jzNr2ghhC7bH1/H36TLGsiUKSopzfhdHB4aSa2RczWmSdN35ZwZXJ18cha9qX1vLO1BpQ==',\n  'U2FsdGVkX18kqQVkl8zGUA8schCVAm6NWNM0q/bCV7dHyUJoy8JPbRms4IIsFNU4Ahx6ffx0FVYsOIatS98WjA==',\n  \"U2FsdGVkX18y9RiV+sdQG+dNc09ETZfLddhx6sEu10zP07S14C9X4cdXXRtwJ+Pa+x2zycwllBLV9opSgQ9Cjg==\"\n];\n\nexport const PROCESS_STAGE = {\n  INIT: 'INIT',\n  VALIDATE_OTP: 'VALIDATE_OTP',\n  FETCH_BENEFICIARY: 'FETCH_BENEFICIARY',\n  FETCH_SLOTS: 'FETCH_SLOTS',\n  TRIGGER_CAPTCHA: 'TRIGGER_CAPTCHA',\n  SCHEDULE: 'SCHEDULE',\n  SLOT_BOOKED: 'SLOT_BOOKED',\n  ERROR: 'ERROR',\n  EXISTING_BOOKING: 'EXISTING_BOOKING',\n  BOOKING_FAILED: 'BOOKING_FAILED',\n  VACCINATED: 'VACCINATED',\n  REGISTERED: 'REGISTERED'\n};\n\nexport const API_URLS = {\n  [PROCESS_STAGE.INIT]: 'https://cdn-api.co-vin.in/api/v2/auth/generateMobileOTP',\n  [PROCESS_STAGE.VALIDATE_OTP]: 'https://cdn-api.co-vin.in/api/v2/auth/validateMobileOtp',\n  [PROCESS_STAGE.FETCH_BENEFICIARY]: 'https://cdn-api.co-vin.in/api/v2/appointment/beneficiaries',\n  [PROCESS_STAGE.TRIGGER_CAPTCHA]: 'https://cdn-api.co-vin.in/api/v2/auth/getRecaptcha',\n  [PROCESS_STAGE.SCHEDULE]: 'https://cdn-api.co-vin.in/api/v2/appointment/schedule',\n  [PROCESS_STAGE.FETCH_SLOTS]: 'https://cdn-api.co-vin.in/api/v2/appointment/sessions/calendarByDistrict'\n};\n\nexport const ALLOWED_NAME_EDITS = 3;\n\nexport const SLOT_FILTER = {\n  MIN_AGE: 18,\n  MIN_CAPACITY: 5\n};\n\nexport const ERROR_CODE = {\n  NO_BENEFICIARY: 'NO_BENEFICIARY',\n  NO_SLOT: 'NO_SLOT',\n  INVALID_OTP: 'INVALID_OTP',\n  INVALID_CAPTCHA: 'INVALID_CAPTCHA',\n  EXISTING_BOOKING: 'EXISTING_BOOKING',\n  UNKNOWN_ERROR: 'UNKNOWN_ERROR'\n};\n\nexport const COWIN_ERROR_CODE = {\n  [ERROR_CODE.EXISTING_BOOKING]: 'APPOIN0022',\n  [ERROR_CODE.INVALID_OTP]: 'USRAUT0014',\n  [ERROR_CODE.INVALID_CAPTCHA]: 'APPOIN0045',\n  [ERROR_CODE.NO_BENEFICIARY]: 'APPOIN0001'\n};\n\nexport const OTP_RETRY_TIME = 120;\n\nexport const MAX_BOOKING_ATTEMPT = 2;\n\nexport const ID_TYPE = {\n  'Aadhaar Card': 'aadhaar_card',\n  'PAN Card': 'pan_card'\n};\n\nexport const SLOT_CUTOFF_HOUR = 15;"],"sourceRoot":""}